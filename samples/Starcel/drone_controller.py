from panda3d.core import ModifierButtons, Vec3, PStatClient, Point3, CurveFitter, KeyboardButton, Quat, LVecBase3f, NodePath, LRotation
from starcelfuncs import FiniteRepetitionSelector, look_at_rotation, Cylinder, KeyboardCapturer
from DistributedSmoothActor import DistributedSmoothActor
from functools import reduce
import random
import numpy as np
import math
#from circuit import QMI8658_Accelerometer
#import gc9a01
#from multiprocessing import Process,Queue,Pipe
#from rp2040gyro import f
#import board
#import busio
#import socket
#import sys
import serial

# class QMI8658_Accelerometer(object):
#     # Initialize the hardware
#     # address: the I2C address of the device
#     # returns: nothing
#     def __init__(self, address=0x6B, scl=board.GP7, sda=board.GP6):
#         self._address = address
#         self._bus = busio.I2C(scl, sda)
#         if self.who_am_i():
#             self.rev = self.read_revision()
#         else:
#             raise Exception("QMI8658 not found")
#         self.config_apply()
#
#     # Read a byte from the specified register
#     # register: the register to read from
#     # returns: the byte read
#     def _read_byte(self, register):
#         return self._read_block(register, 1)[0]
#
#     # Read a block of bytes from the specified register
#     # register: the register to begin the read from
#     # length: the number of bytes to read
#     # returns: a list of bytes read
#     def _read_block(self, register, length=1):
#         while not self._bus.try_lock():
#             pass
#         try:
#             rx = bytearray(length)
#             self._bus.writeto(self._address, bytes([register]))
#             self._bus.readfrom_into(self._address, rx)
#         finally:
#             self._bus.unlock()
#         return rx
#
#     # Read a 16-bit unsigned integer from the specified register
#     # register: the register to begin the read from
#     # returns: the 16-bit unsigned integer read
#     def _read_u16(self, register):
#         return (self._read_byte(register) << 8) + self._read_byte(register + 1)
#
#     # Write a byte to the specified register
#     # register: the register to write to
#     # value: the byte to write
#     # returns: nothing
#     def _write_byte(self, register, value):
#         while not self._bus.try_lock():
#             pass
#         try:
#             self._bus.writeto(self._address, bytes([register, value]))
#             # self._bus.writeto(self._address, bytes([value]))
#         finally:
#             self._bus.unlock()
#
#     # Make sure this device is what it thinks it is
#     # returns: True if the device is what it thinks it is, False otherwise
#     def who_am_i(self):
#         bRet = False
#         rec = self._read_byte(0x00)
#         if (0x05) == rec:
#             bRet = True
#         return bRet
#
#     # Read the revision of the device
#     # returns: the revision of the device
#     def read_revision(self):
#         return self._read_byte(0x01)
#
#     # Apply the configuration to the device by writing to
#     # the appropriate registers.  See device datasheet for
#     # details on the configuration.
#     # returns: nothing
#     def config_apply(self):
#         # REG CTRL1
#         self._write_byte(0x02, 0x60)
#         # REG CTRL2 : QMI8658AccRange_8g  and QMI8658AccOdr_1000Hz
#         self._write_byte(0x03, 0x23)
#         # REG CTRL3 : QMI8658GyrRange_512dps and QMI8658GyrOdr_1000Hz
#         self._write_byte(0x04, 0x53)
#         # REG CTRL4 : No
#         self._write_byte(0x05, 0x00)
#         # REG CTRL5 : Enable Gyroscope And Accelerometer Low-Pass Filter
#         self._write_byte(0x06, 0x11)
#         # REG CTRL6 : Disables Motion on Demand.
#         self._write_byte(0x07, 0x00)
#         # REG CTRL7 : Enable Gyroscope And Accelerometer
#         self._write_byte(0x08, 0x03)
#
#     # Read the raw accelerometer and gyroscope data from the device
#     # returns: a list of 6 integers, the first 3 are the accelerometer
#     #          data, the last 3 are the gyroscope data
#     def read_raw_xyz(self):
#         xyz = [0, 0, 0, 0, 0, 0]
#         raw_timestamp = self._read_block(0x30, 3)
#         raw_acc_xyz = self._read_block(0x35, 6)
#         raw_gyro_xyz = self._read_block(0x3B, 6)
#         raw_xyz = self._read_block(0x35, 12)
#         timestamp = (
#             (raw_timestamp[2] << 16) | (raw_timestamp[1] << 8) | (raw_timestamp[0])
#         )
#         for i in range(6):
#             # xyz[i]=(raw_acc_xyz[(i*2)+1]<<8)|(raw_acc_xyz[i*2])
#             # xyz[i+3]=(raw_gyro_xyz[((i+3)*2)+1]<<8)|(raw_gyro_xyz[(i+3)*2])
#             xyz[i] = (raw_xyz[(i * 2) + 1] << 8) | (raw_xyz[i * 2])
#             if xyz[i] >= 32767:
#                 xyz[i] = xyz[i] - 65535
#         return xyz
#
#     # Read the accelerometer and gyroscope data from the device and return
#     # in human-readable format.
#     # returns: a list of 6 floats, the first 3 are the accelerometer
#     #         data, the last 3 are the gyroscope data
#     def read_xyz(self):
#         xyz = [0, 0, 0, 0, 0, 0]
#         raw_xyz = self.read_raw_xyz()
#         # QMI8658AccRange_8g
#         acc_lsb_div = 1 << 12
#         # QMI8658GyrRange_512dps
#         gyro_lsb_div = 64
#         for i in range(3):
#             xyz[i] = raw_xyz[i] / acc_lsb_div  # (acc_lsb_div/1000.0)
#             xyz[i + 3] = raw_xyz[i + 3] * 1.0 / gyro_lsb_div
#         return xyz




class DroneController():
    def __init__(self, client_repository):
        #base = showbase
        self.movement = [0, 0, 0]
        self.velocity = Vec3(0.0)
        self.hpr_movement = [0, 0]
        self.initial_destination = Vec3(0)
        self.speed = 1
        self.initial_position = Vec3(0)
        self.initial_hpr = Vec3(0)
        self.mouse_enabled = False
        self.last_mouse_pos = [0, 0]
        self.mouse_sensivity = 4
        self.keyboard_hpr_speed = 1
        self.use_hpr = False
        self.smoothness = .0001
        # self.bobbing_amount = 1.5
        # self.bobbing_speed = 0.5

        self.client_repository = client_repository
        self.mmb_activated = False
        # self.alt_activated = False
        # self.ctrl_activated = False
        self.shift_activated = False
        self.ctrl_activated = False
        self.size = 1
        self.freelook_activated = False
        self.firstpersonlook_activated = False
        self.freelook_distance = 8
        self.current_freelook_rot_r = base.camera.get_r()
        self.drone = DistributedSmoothActor(self.client_repository)
        self.keyboard_capturer = KeyboardCapturer()
        #self.boom_arm = Cylinder((0,0,0),(-2,0,0),0.1,self.drone)

        self.boom_pivot = NodePath('boom_pivot')
        self.cam_point = NodePath('cam_point')
        self.boom_pivot.reparent_to(render)
        self.cam_point.reparent_to(self.boom_pivot)

        self.value_selector = FiniteRepetitionSelector("*", 2)

        self.client_repository.createDistributedObject(distObj=self.drone, zoneId=2)

        self.xrsdk = None
        # open serial port (NOTE: change location as needed)
        #self.ss = serial.Serial("COM5")

        # read string
        #_ = self.ss.readline()  # first read may be incomplete, just toss it


        #self.myaccel = QMI8658_Accelerometer()
        self.counter = 0
        self.sample_gyro_values = [[-11.1875, -6.09375, 0.109375],
[-11.4375, -6.14063, 0.375],
[-11.5625, -6.20313, 0.421875],
[-11.4531, -6.34375, 0.265625],
[-11.1406, -6.5, -0.09375],
[-10.6875, -6.57813, -0.390625],
[-10.4375, -6.51563, -0.484375],
[-10.4063, -6.40625, -0.234375],
[-10.6094, -6.34375, 0.078125],
[-10.8594, -6.26563, 0.34375],
[-11.125, -6.0625, 0.421875],
[-11.25, -5.76563, 0.390625],
[-11.2031, -5.4375, 0.171875],
[-10.9688, -5.26563, -0.15625],
[-10.7656, -5.17188, -0.515625],
[-10.5625, -5.17188, -0.65625],
[-10.4375, -5.23438, -0.53125],
[-10.375, -5.26563, -0.328125],
[-10.3281, -5.29688, -0.21875],
[-10.3125, -5.35938, -0.125],
[-10.2813, -5.42188, -0.0625],
[-10.2344, -5.4375, -0.015625],
[-10.1406, -5.28125, -0.046875],
[-10.0625, -5.10938, -0.1875],
[-10.0938, -5.07813, -0.4375],
[-10.3125, -5.3125, -0.5625],
[-10.5781, -5.70313, -0.515625],
[-10.6875, -6.17188, -0.3125],
[-10.3906, -6.39063, -0.25],
[-9.875, -6.25, -0.484375],
[-9.09375, -5.75, -0.9375],
[-8.42188, -5.46875, -1.45313],
[-7.95313, -5.42188, -1.79688],
[-7.875, -5.34375, -1.625],
[-8.125, -5.21875, -0.984375],
[-8.53125, -5.3125, -0.34375],
[-8.90625, -5.71875, 0.203125],
[-9.32813, -6.46875, 0.78125],
[-9.85938, -7.15625, 1.26563],
[-10.2813, -7.78125, 1.79688],
[-10.7031, -8.25, 2.04688],
[-10.9688, -8.42188, 2.14063],
[-11.125, -8.54688, 2.23438],
[-11.0625, -8.65625, 2.32813],
[-10.875, -8.70313, 2.20313],
[-10.7031, -8.4375, 1.79688],
[-10.5625, -7.96875, 1.20313],
[-10.3281, -7.29688, 0.46875],
[-9.84375, -6.85938, -0.015625],
[-9.34375, -6.67188, -0.484375],
[-9.0, -6.79688, -0.71875],
[-9.07813, -7.03125, -0.734375],
[-9.42188, -7.25, -0.421875],
[-9.85938, -7.3125, -0.09375],
[-10.0469, -7.26563, 0.140625],
[-9.96875, -7.125, 0.125],
[-9.78125, -7.03125, -0.078125],
[-9.60938, -6.96875, -0.421875],
[-9.59375, -6.90625, -0.609375],
[-9.73438, -6.84375, -0.625],
[-9.89063, -6.85938, -0.578125],
[-9.98438, -7.0, -0.53125],
[-10.0, -7.07813, -0.453125],
[-9.89063, -6.98438, -0.359375],
[-9.71875, -6.67188, -0.234375],
[-9.5, -6.28125, -0.140625],
[-9.3125, -5.8125, -0.15625],
[-8.96875, -5.28125, -0.46875],
[-8.60938, -5.03125, -0.96875],
[-8.40625, -4.875, -1.375],
[-8.57813, -4.78125, -1.23438],
[-8.98438, -4.84375, -0.640625],
[-9.4375, -5.28125, -0.1875],
[-9.48438, -5.79688, -0.140625],
[-9.25, -6.17188, -0.59375],
[-8.89063, -6.10938, -1.0625],
[-8.6875, -5.85938, -1.375],
[-8.6875, -5.60938, -1.32813],
[-8.9375, -5.54688, -0.984375],
[-9.32813, -5.65625, -0.34375],
[-9.82813, -5.89063, 0.1875],
[-10.1563, -6.1875, 0.640625],
[-10.4063, -6.46875, 0.8125],
[-10.5313, -6.5625, 0.828125],
[-10.625, -6.5, 0.78125],
[-10.5781, -6.46875, 0.796875],
[-10.4219, -6.5625, 0.8125],
[-10.2344, -6.75, 0.78125],
[-10.0938, -6.8125, 0.671875],
[-9.90625, -6.67188, 0.4375],
[-9.71875, -6.42188, 0.15625],
[-9.53125, -6.09375, -0.21875],
[-9.35938, -5.9375, -0.40625],
[-9.32813, -5.96875, -0.375],
[-9.5, -6.1875, -0.125],
[-9.73438, -6.375, 0.0625],
[-10.0156, -6.5, 0.203125],
[-10.4063, -6.625, 0.234375],
[-10.6875, -6.78125, 0.25],
[-10.9063, -7.09375, 0.3125],
[-11.1094, -7.40625, 0.40625],
[-11.2188, -7.67188, 0.515625],
[-11.125, -7.82813, 0.53125],
[-10.8906, -7.78125, 0.390625],
[-10.6719, -7.59375, 0.15625],
[-10.5313, -7.32813, 0.046875],
[-10.5, -7.15625, 0.09375],
[-10.5, -6.9375, 0.1875],
[-10.625, -6.6875, 0.203125],
[-10.875, -6.42188, 0.25],
[-11.2188, -6.1875, 0.421875],
[-11.3125, -6.17188, 0.609375],
[-11.0938, -6.40625, 0.5],
[-10.6094, -6.67188, 0.109375],
[-10.2656, -6.89063, -0.28125],
[-9.96875, -7.07813, -0.40625],
[-9.76563, -7.125, -0.40625],
[-9.6875, -6.92188, -0.359375],
[-9.85938, -6.51563, -0.265625],
[-10.0781, -6.03125, -0.234375],
[-10.25, -5.53125, -0.4375],
[-10.25, -5.32813, -0.84375],
[-10.125, -5.39063, -1.35938],
[-9.92188, -5.53125, -1.60938],
[-9.76563, -5.53125, -1.70313],
[-9.625, -5.32813, -1.6875],
[-9.4375, -5.1875, -1.64063],
[-9.10938, -5.17188, -1.625],
[-8.6875, -5.17188, -1.73438],
[-8.5, -5.17188, -1.89063],
[-8.5625, -5.21875, -2.01563],
[-8.78125, -5.17188, -1.92188],
[-9.07813, -5.0, -1.59375],
[-9.45313, -4.78125, -1.39063],
[-9.64063, -4.71875, -1.42188],
[-9.64063, -4.84375, -1.6875],
[-9.375, -5.07813, -1.90625],
[-9.15625, -5.28125, -1.95313],
[-9.14063, -5.4375, -1.8125],
[-9.39063, -5.4375, -1.60938],
[-9.76563, -5.32813, -1.17188],
[-10.25, -5.17188, -0.75],
[-10.5938, -5.07813, -0.40625],
[-10.8125, -5.03125, -0.234375],
[-10.7969, -5.0625, -0.296875],
[-10.6719, -5.14063, -0.484375],
[-10.5625, -5.21875, -0.640625],
[-10.5625, -5.26563, -0.71875],
[-10.7188, -5.3125, -0.625],
[-10.9531, -5.32813, -0.46875],
[-11.2813, -5.39063, -0.265625],
[-11.6719, -5.57813, -0.15625],
[-11.8438, -5.84375, -0.046875],
[-11.7656, -6.23438, 0.09375],
[-11.5469, -6.48438, 0.265625],
[-11.25, -6.60938, 0.359375],
[-10.8438, -6.57813, 0.25],
[-10.5156, -6.51563, 0.015625],
[-10.1719, -6.51563, -0.1875],
[-9.96875, -6.64063, -0.375],
[-10.0625, -6.79688, -0.546875],
[-10.6094, -6.8125, -0.609375],
[-11.7969, -6.67188, -0.390625],
[-11.75, -6.625, -0.5],
[-11.2813, -6.5, -0.75],
[-10.8125, -6.26563, -0.96875],
[-10.4531, -5.92188, -0.921875],
[-10.4063, -5.70313, -0.71875],
[-10.4844, -5.67188, -0.5625],
[-10.5781, -5.89063, -0.578125],
[-10.6875, -6.23438, -0.703125],
[-10.7969, -6.65625, -0.828125],
[-10.7969, -6.92188, -0.953125],
[-10.7656, -7.03125, -0.953125],
[-10.7344, -6.92188, -0.859375],
[-10.6406, -6.59375, -0.828125],
[-10.4844, -6.25, -0.875],
[-10.3281, -6.0, -0.796875],
[-10.1406, -5.92188, -0.59375],
[-9.92188, -6.0625, -0.453125],
[-9.70313, -6.375, -0.59375],
[-9.65625, -6.5625, -0.828125],
[-9.8125, -6.71875, -0.859375],
[-10.2031, -6.78125, -0.5625],
[-10.5938, -6.78125, -0.21875],
[-11.0313, -6.67188, -0.015625],
[-11.2656, -6.60938, -0.03125],
[-11.3594, -6.71875, -0.140625],
[-11.3594, -6.92188, -0.1875],
[-11.25, -7.125, -0.25],
[-10.9688, -7.25, -0.3125],
[-10.6719, -7.125, -0.359375],
[-10.3594, -6.79688, -0.40625],
[-10.0625, -6.48438, -0.40625],
[-9.96875, -6.1875, -0.328125],
[-10.0156, -5.9375, -0.234375],
[-10.125, -5.98438, -0.21875],
[-10.2813, -6.20313, -0.234375],
[-10.4375, -6.5625, -0.140625],
[-10.5781, -6.8125, 0.0625],
[-10.875, -6.92188, 0.25],
[-11.2656, -6.82813, 0.4375],
[-11.7188, -6.70313, 0.71875],
[-12.1406, -6.65625, 0.875],
[-12.2188, -6.75, 0.796875],
[-12.0469, -7.01563, 0.53125],
[-11.875, -7.23438, 0.4375],
[-11.7344, -7.34375, 0.515625],
[-11.5781, -7.1875, 0.59375],
[-11.4531, -6.78125, 0.53125],
[-11.3438, -6.20313, 0.375],
[-11.2813, -5.90625, 0.15625],
[-11.2188, -5.95313, -0.109375],
[-11.2188, -6.1875, -0.28125],
[-11.2813, -6.51563, -0.125],
[-11.4375, -6.82813, 0.25],
[-11.5469, -7.14063, 0.6875],
[-11.625, -7.4375, 1.0],
[-11.6563, -7.5625, 1.07813],
[-11.75, -7.625, 1.09375],
[-11.9844, -7.625, 1.0625],
[-12.1563, -7.5, 0.953125],
[-12.25, -7.28125, 0.703125],
[-12.2813, -6.9375, 0.5],
[-12.1719, -6.70313, 0.34375],
[-11.8125, -6.57813, 0.15625],
[-11.4219, -6.53125, -0.234375],
[-11.0938, -6.4375, -0.84375],
[-10.9844, -6.26563, -1.14063],
[-11.1719, -6.0625, -1.17188],
[-11.625, -5.79688, -1.07813],
[-12.0469, -5.5625, -0.953125],
[-12.4531, -5.26563, -0.796875],
[-12.75, -5.14063, -0.640625],
[-12.7813, -5.25, -0.5],
[-12.6094, -5.73438, -0.453125],
[-12.2969, -6.34375, -0.453125],
[-11.6719, -7.0625, -0.546875],
[-11.0625, -7.35938, -0.75],
[-10.5313, -7.14063, -0.9375],
[-10.1875, -6.6875, -0.90625],
[-10.0781, -6.10938, -0.71875],
[-10.1406, -5.70313, -0.546875],
[-10.375, -5.375, -0.4375],
[-10.75, -5.32813, -0.375],
[-11.0, -5.65625, -0.359375],
[-11.125, -6.28125, -0.484375],
[-11.125, -6.76563, -0.609375],
[-11.1094, -7.09375, -0.5625],
[-11.1406, -7.25, -0.296875],
[-11.2344, -7.28125, 0.0625],
[-11.375, -7.23438, 0.375],
[-11.4375, -7.23438, 0.390625],
[-11.3906, -7.28125, 0.15625],
[-11.3438, -7.25, -0.140625],
[-11.4531, -7.10938, -0.234375],
[-11.7188, -6.65625, -0.21875],
[-12.1719, -6.01563, -0.171875],
[-12.5938, -5.29688, -0.1875],
[-13.2656, -4.67188, -0.359375],
[-13.9844, -4.40625, -0.78125],
[-15.0625, -4.21875, -1.34375],
[-15.9531, -4.15625, -1.5],
[-16.6719, -4.25, -1.20313],
[-17.0625, -4.51563, -0.71875],
[-16.8125, -4.70313, -0.34375],
[-12.0625, -4.89063, -0.078125],
[-14.8125, -5.0625, -0.078125],
[-13.7344, -5.21875, -0.4375],
[-12.5781, -5.21875, -1.01563],
[-11.75, -5.07813, -1.625],
[-10.9844, -5.01563, -2.14063],
[-10.1563, -5.26563, -2.25],
[-9.59375, -5.75, -2.14063],
[-9.14063, -6.3125, -1.875],
[-8.76563, -6.59375, -1.6875],
[-8.39063, -6.71875, -1.54688],
[-8.0625, -6.79688, -1.46875],
[-7.92188, -6.875, -1.35938],
[-7.98438, -6.85938, -1.23438],
[-8.21875, -6.60938, -1.15625],
[-8.46875, -6.25, -0.984375],
[-8.6875, -6.0625, -0.78125],
[-8.85938, -6.1875, -0.609375],
[-9.20313, -6.40625, -0.5625],
[-9.57813, -6.48438, -0.5625],
[-10.0313, -6.45313, -0.546875],
[-10.2188, -6.3125, -0.609375],
[-10.1719, -6.125, -0.84375],
[-9.92188, -5.89063, -1.03125],
[-9.75, -5.78125, -1.0625],
[-9.67188, -5.89063, -0.96875],
[-9.625, -6.20313, -0.921875],
[-9.57813, -6.73438, -0.90625],
[-9.64063, -7.0625, -0.8125],
[-9.82813, -7.10938, -0.59375],
[-10.1563, -6.9375, -0.375],
[-10.4219, -6.73438, -0.1875],
[-10.5625, -6.54688, -0.15625],
[-10.5469, -6.46875, -0.234375],
[-10.3594, -6.53125, -0.25],
[-10.0, -6.67188, -0.078125],
[-9.75, -6.60938, 0.234375],
[-9.73438, -6.23438, 0.34375],
[-9.89063, -5.79688, 0.140625],
[-10.0938, -5.39063, -0.40625],
[-10.3281, -5.34375, -0.90625],
[-10.5781, -5.5625, -1.3125],
[-10.9531, -5.89063, -1.39063],
[-11.1875, -6.07813, -1.21875],
[-11.2813, -6.17188, -0.78125],
[-11.2188, -6.25, -0.25],
[-11.0156, -6.40625, 0.40625],
[-10.625, -6.625, 0.8125],
[-10.3594, -6.70313, 1.0],
[-10.2969, -6.59375, 0.953125],
[-10.5156, -6.34375, 0.8125],
[-10.8906, -5.98438, 0.578125],
[-11.5156, -5.45313, 0.3125],
[-12.1094, -5.0, 0.0],
[-12.7813, -4.65625, -0.3125],
[-13.2656, -4.60938, -0.46875],
[-13.6875, -4.70313, -0.609375],
[-14.1094, -4.79688, -0.65625],
[-14.4063, -4.89063, -0.5],
[-14.7031, -4.95313, -0.140625],
[-14.7344, -4.96875, 0.484375],
[-14.2969, -4.95313, 1.82813],
[-13.5, -4.98438, 3.35938],
[-12.4844, -5.10938, 5.29688],
[-11.3281, -5.32813, 6.71875],
[-10.7031, -5.39063, 11.9375],
[-10.5156, -5.09375, 9.29688],
[-10.9219, -4.35938, 10.4844],
[-11.7656, -3.0, 11.8281],
[-13.0156, -1.92188, 12.6094],
[-13.8906, -1.25, 12.8125],
[-14.6094, -1.14063, 12.3438],
[-15.125, -1.10938, 11.4844],
[-15.7969, -1.01563, 10.8281],
[-16.5625, -0.96875, 10.2813],
[-17.7813, -0.796875, 9.59375],
[-19.4063, -0.453125, 8.89063],
[-20.2188, -0.40625, 8.01563],
[-20.0781, -1.34375, 7.32813],
[-19.0469, -2.59375, 6.9375],
[-17.0156, -3.76563, 7.79688],
[-13.2188, -4.0, 10.2969],
[-9.95313, -3.54688, 14.5469],
[-7.54688, -2.375, 17.4531],
[-7.1875, -1.34375, 18.7813],
[-7.73438, -0.78125, 18.5938],
[-8.57813, -1.0, 17.8594],
[-8.89063, -1.67188, 17.1094],
[-8.48438, -2.75, 16.5313],
[-7.5625, -3.73438, 15.75],
[-6.25, -4.90625, 14.5156],
[-4.5625, -5.8125, 13.375],
[-3.26563, -6.67188, 11.8906],
[-1.70313, -7.73438, 10.8125],
[-0.078125, -8.64063, 10.5469],
[1.625, -9.51563, 11.5625],
[2.84375, -9.79688, 12.6875],
[2.51563, -9.5, 13.0625],
[0.515625, -8.71875, 12.0938],
[-1.96875, -8.10938, 10.5156],
[-4.78125, -7.54688, 8.70313],
[-8.09375, -7.17188, 7.79688],
[-10.3438, -6.71875, 7.875],
[-12.0469, -6.14063, 9.20313],
[-12.8438, -5.875, 11.6406],
[-13.4063, -5.65625, 15.1875],
[-13.75, -5.375, 18.0938],
[-13.2813, -5.25, 21.9219],
[-11.7813, -5.8125, 25.6875],
[-10.3906, -6.54688, 29.2813],
[-9.54688, -6.46875, 31.4375],
[-9.57813, -5.23438, 30.5],
[-10.2344, -3.60938, 26.9844],
[-11.9844, -3.15625, 23.875],
[-14.7656, -3.1875, 21.7188],
[-19.25, -2.89063, 21.375],
[-22.8125, -2.48438, 21.6875],
[-25.3281, -2.53125, 21.8438],
[-27.1094, -2.90625, 21.4375],
[-28.2188, -3.0625, 20.6094],
[-29.375, -2.84375, 19.9531],
[-29.9219, -3.0625, 19.5156],
[-29.6563, -4.3125, 19.5313],
[-27.6719, -5.64063, 20.4063],
[-24.625, -6.75, 22.2969],
[-20.2344, -7.04688, 23.7969],
[-17.375, -6.85938, 24.9063],
[-16.4531, -5.98438, 25.2656],
[-17.4375, -4.92188, 25.4688],
[-18.9375, -4.3125, 26.2188],
[-19.3125, -4.84375, 28.0156],
[-18.25, -5.8125, 33.4063],
[-15.1094, -6.125, 41.9219],
[-12.1094, -5.65625, 55.7969],
[-9.71875, -3.75, 67.25],
[-9.1875, -1.40625, 75.4844],
[-9.85938, 1.125, 79.0938],
[-11.75, 2.4375, 77.3281],
[-13.7344, 2.84375, 71.8906],
[-15.9688, 2.32813, 66.5781],
[-17.0469, 1.32813, 61.7969],
[-16.9688, -0.515625, 57.3438],
[-15.9375, -2.6875, 54.625],
[-14.1719, -6.10938, 52.5313],
[-11.4219, -9.67188, 52.0],
[-9.53125, -13.2656, 52.2656],
[-8.8125, -16.1563, 52.0469],
[-9.32813, -17.1094, 50.7188],
[-9.92188, -17.0313, 48.6875],
[-9.96875, -16.4219, 48.1875],
[-9.8125, -15.5469, 49.1563],
[-10.1094, -14.4219, 49.8125],
[-10.9844, -13.875, 49.0313],
[-12.5938, -13.9063, 46.1563],
[-14.0, -14.3281, 43.0],
[-15.2031, -15.2188, 39.6094],
[-16.2969, -16.1719, 37.8594],
[-16.8438, -17.0313, 37.0469],
[-16.8281, -17.7188, 36.5469],
[-16.1094, -18.0469, 35.2188],
[-14.6406, -18.375, 32.25],
[-12.0, -18.6719, 29.3906],
[-9.6875, -18.6094, 26.8125],
[-7.95313, -17.3438, 25.7656],
[-8.09375, -15.2813, 25.5938],
[-9.89063, -12.1406, 26.2344],
[-11.875, -9.6875, 27.3125],
[-13.6875, -7.65625, 28.6875],
[-15.2344, -6.90625, 29.6406],
[-15.9063, -7.0, 30.9219],
[-16.3125, -7.9375, 32.4844],
[-16.9688, -9.0625, 34.5469],
[-18.2969, -10.6094, 37.6719],
[-19.2344, -11.9688, 41.4531],
[-19.875, -13.25, 47.9688],
[-20.875, -13.4531, 53.8594],
[-22.0625, -12.875, 58.7188],
[-23.4375, -11.8281, 59.5469],
[-23.9063, -11.1094, 57.5313],
[-23.4531, -10.6875, 52.6719],
[-22.0938, -10.6719, 48.1719],
[-20.9688, -10.5469, 43.7031],
[-20.2969, -9.71875, 41.0781],
[-20.5313, -8.57813, 39.0625],
[-21.3594, -7.53125, 36.5938],
[-21.9375, -7.70313, 34.2344],
[-22.3594, -8.96875, 31.125],
[-23.1406, -11.0469, 28.375],
[-24.4063, -12.5938, 24.8594],
[-26.9375, -13.9531, 21.6563],
[-29.6719, -14.6875, 18.0313],
[-33.1563, -15.4844, 13.0781],
[-35.75, -16.0625, 8.6875],
[-37.2656, -16.2031, 3.76563],
[-37.0469, -15.4531, 0.328125],
[-35.3281, -13.875, -2.3125],
[-32.3281, -11.1406, -4.10938],
[-29.9063, -8.75, -4.1875],
[-28.1406, -6.5625, -2.64063],
[-26.9844, -4.3125, -0.171875],
[-26.4844, -2.85938, 3.0],
[-25.6875, -1.60938, 7.04688],
[-24.5, -0.9375, 9.89063],
[-22.6719, -0.515625, 11.9375],
[-19.6563, -0.671875, 12.4219],
[-16.5938, -1.5, 12.125],
[-12.6875, -3.46875, 11.75],
[-9.75, -5.59375, 11.5469],
[-7.85938, -7.76563, 11.5938],
[-7.21875, -8.45313, 11.6875],
[-7.40625, -8.09375, 11.3594],
[-7.70313, -7.0625, 10.5625],
[-7.9375, -6.04688, 9.48438],
[-8.125, -5.01563, 7.98438],
[-8.09375, -4.71875, 6.51563],
[-7.8125, -4.98438, 4.45313],
[-7.45313, -5.84375, 2.60938],
[-7.4375, -6.71875, 0.765625],
[-7.79688, -7.46875, -1.35938],
[-8.57813, -8.07813, -3.17188],
[-9.09375, -8.48438, -5.17188],
[-9.07813, -9.1875, -7.96875],
[-8.40625, -10.0469, -10.6094],
[-7.21875, -11.0625, -13.875],
[-5.29688, -12.1406, -16.4531],
[-3.25, -12.8438, -18.9375],
[-0.90625, -13.6094, -22.0781],
[1.54688, -14.3125, -25.0938],
[2.3125, -15.25, -29.3906],
[0.421875, -15.6094, -33.75],
[-3.4375, -15.1875, -40.2656],
[-9.54688, -13.9844, -46.6875],
[-14.5313, -12.8594, -53.5781],
[-19.1719, -11.7656, -61.7813],
[-21.75, -11.0625, -67.9063],
[-23.5938, -9.9375, -73.6406],
[-25.3281, -8.54688, -76.7188],
[-26.2188, -7.125, -78.5156],
[-26.2344, -6.15625, -78.9688],
[-25.5625, -6.20313, -79.0781],
[-24.4844, -7.04688, -79.1406],
[-22.6563, -8.07813, -78.9844],
[-20.5, -9.07813, -77.9844],
[-17.1406, -9.85938, -76.2031],
[-13.9531, -9.875, -72.75],
[-10.2813, -9.09375, -69.0469],
[-7.85938, -8.14063, -65.2031],
[-6.53125, -6.79688, -61.0313],
[-6.45313, -5.125, -58.0625],
[-7.09375, -2.8125, -55.5625],
[-7.79688, 0.390625, -53.2344],
[-8.5, 2.89063, -51.9063],
[-9.01563, 4.70313, -50.9219],
[-9.375, 5.73438, -50.3906],
[-8.96875, 6.42188, -50.0938],
[-8.64063, 7.01563, -51.0313],
[-8.4375, 7.84375, -53.1875],
[-8.51563, 8.35938, -55.6094],
[-8.73438, 8.70313, -58.8125],
[-8.64063, 8.875, -61.6094],
[-8.10938, 8.6875, -64.7969],
[-7.5, 7.79688, -68.5625],
[-7.32813, 6.20313, -69.5781],
[-7.90625, 4.26563, -66.6875],
[-8.67188, 2.6875, -58.4219],
[-8.54688, 2.3125, -50.4219],
[-7.39063, 2.3125, -43.4219],
[-4.96875, 1.85938, -40.4844],
[-2.76563, 0.671875, -38.7188],
[-1.0, -1.21875, -37.25],
[-0.734375, -2.54688, -35.3281],
[-1.75, -3.54688, -32.8281],
[-3.10938, -4.26563, -30.7969],
[-4.09375, -5.78125, -29.0],
[-3.75, -8.125, -28.7969],
[-2.01563, -11.4063, -30.5156],
[0.6875, -15.3281, -32.7656],
[2.25, -17.2813, -34.125],
[2.40625, -17.1563, -33.3438],
[0.703125, -15.1094, -31.0625],
[-1.5, -12.0938, -27.8281],
[-3.92188, -8.57813, -25.2188],
[-5.04688, -6.51563, -22.4844],
[-5.39063, -5.15625, -18.875],
[-5.125, -4.67188, -15.8906],
[-4.6875, -4.40625, -12.8281],
[-4.20313, -4.09375, -10.9063],
[-3.90625, -3.78125, -9.375],
[-3.96875, -3.5, -7.70313],
[-4.57813, -3.42188, -6.4375],
[-5.6875, -3.45313, -5.15625],
[-7.39063, -3.5, -4.20313],
[-8.96875, -3.29688, -3.15625],
[-10.5469, -2.53125, -1.5625],
[-12.1875, -1.65625, 0.09375],
[-13.1563, -0.9375, 2.29688],
[-13.7344, -0.65625, 3.85938],
[-13.6719, -0.96875, 4.75],
[-13.2031, -1.875, 4.70313],
[-12.4219, -2.79688, 3.8125],
[-11.8594, -3.65625, 2.1875],
[-11.5469, -4.28125, 0.796875],
[-11.625, -4.32813, -0.3125],
[-11.8125, -4.0625, -1.17188],
[-11.7344, -4.0, -1.53125],
[-11.3281, -4.5, -1.8125],
[-10.6875, -5.40625, -2.125],
[-10.3594, -6.53125, -2.4375],
[-10.4375, -7.8125, -2.4375],
[-11.1094, -8.75, -2.0625],
[-12.125, -9.45313, -1.51563],
[-13.3594, -10.0625, -1.34375],
[-13.7188, -10.7344, -1.76563],
[-13.1563, -12.0781, -3.21875],
[-12.1406, -13.4688, -5.26563],
[-11.1875, -14.7188, -8.26563],
[-10.5, -15.5625, -10.6406],
[-10.1719, -15.6406, -12.7188],
[-9.625, -15.1094, -15.25],
[-8.46875, -14.3594, -17.6875],
[-7.34375, -13.5, -20.8281],
[-6.07813, -12.4063, -23.3438],
[-4.96875, -11.7344, -25.6719],
[-3.60938, -11.5156, -28.3594],
[-1.73438, -11.7969, -30.6406],
[-0.28125, -12.2813, -33.3438],
[1.09375, -12.9844, -35.5469],
[1.98438, -13.7344, -37.75],
[2.70313, -14.8906, -40.0625],
[3.0625, -15.875, -41.25],
[3.28125, -16.7031, -41.6094],
[3.40625, -17.3125, -41.2188],
[3.4375, -17.4688, -40.7031],
[3.73438, -17.6406, -41.2031],
[4.67188, -18.0469, -43.625],
[5.70313, -18.7344, -48.9844],
[7.07813, -19.8438, -54.2188],
[8.3125, -20.7656, -59.3281],
[9.73438, -21.4531, -61.6406],
[10.4063, -21.4219, -61.9375],
[10.2031, -20.8281, -59.7031],
[8.8125, -19.3906, -55.9219],
[7.0625, -17.9063, -50.8906],
[5.25, -16.5313, -44.2813],
[3.54688, -16.2031, -39.75],
[2.8125, -16.6875, -37.3438],
[2.85938, -18.0156, -38.0781],
[3.15625, -18.8438, -43.9688],
[2.96875, -18.4063, -41.4063],
[2.26563, -16.75, -41.0313],
[1.32813, -14.5156, -39.3438],
[0.1875, -12.2031, -38.1563],
[-0.265625, -11.4375, -38.875],
[0.390625, -12.6875, -44.5313],
[3.21875, -15.6719, -53.4063],
[6.1875, -19.6406, -65.8438],
[9.90625, -21.75, -75.5469],
[14.5313, -23.8906, -88.2188],
[20.5, -28.3906, -98.3438],
[23.0625, -31.9375, -102.109],
[22.4844, -31.4063, -95.0],
[18.5, -27.0469, -83.0625],
[13.625, -22.1563, -67.6875],
[7.76563, -17.9063, -57.5781],
[4.26563, -15.7969, -51.4375],
[3.25, -15.6094, -49.4844],
[5.35938, -18.0156, -51.2656],
[8.875, -22.7188, -54.7813],
[11.9375, -25.7344, -56.3438],
[11.5313, -26.0156, -54.6094],
[7.5, -22.1875, -50.7969],
[2.6875, -16.7344, -46.3125],
[-1.84375, -10.75, -41.5938],
[-5.92188, -4.23438, -38.7188],
[-8.03125, 0.484375, -36.7344],
[-9.125, 5.35938, -35.4219],
[-9.51563, 8.54688, -35.0156],
[-9.48438, 10.6094, -35.4844],
[-9.07813, 10.8281, -37.3125],
[-8.54688, 8.73438, -41.0781],
[-7.71875, 3.79688, -49.1719],
[-6.04688, -2.28125, -60.375],
[-2.98438, -11.625, -79.7656],
[0.5625, -18.375, -98.2031],
[1.5625, -21.1406, -117.141],
[0.40625, -19.4219, -126.078],
[-0.78125, -17.2031, -127.125],
[-0.984375, -16.625, -120.0],
[-0.234375, -17.4219, -110.547],
[0.3125, -18.2813, -98.2969],
[-0.265625, -18.2344, -87.7188],
[-2.48438, -16.0938, -72.1406],
[-7.5625, -10.0469, -60.7813],
[-13.125, -2.82813, -47.7031],
[-18.5, 4.59375, -33.4688],
[-23.1406, 11.3281, -24.3438],
[-25.2344, 13.9375, -19.2188],
[-26.3125, 13.7188, -19.9844],
[-26.3281, 11.8281, -26.7969],
[-25.6875, 8.53125, -40.0156],
[-24.625, 5.34375, -51.6563],
[-23.7344, 2.625, -63.3281],
[-22.6406, 0.359375, -70.25],
[-21.5313, -1.71875, -74.3594],
[-20.1406, -4.79688, -75.9688],
[-18.0938, -7.17188, -74.9531],
[-16.0938, -9.34375, -71.0156],
[-14.25, -11.0781, -65.5781],
[-14.0, -10.6875, -58.7031],
[-14.9375, -7.78125, -49.1406],
[-16.9844, -4.0, -40.375],
[-19.2813, 1.5, -29.5156],
[-22.8906, 6.70313, -21.0313],
[-26.25, 12.1094, -12.375],
[-29.9531, 18.0, -6.59375],
[-32.6094, 21.6563, -2.17188],
[-35.1875, 23.8906, 0.4375],
[-35.9531, 23.5781, -0.53125],
[-34.8594, 20.2344, -5.57813],
[-31.75, 15.5781, -11.6875],
[-28.4375, 10.1094, -18.125],
[-24.1406, 3.15625, -24.875],
[-21.0156, -2.39063, -28.8438],
[-18.7813, -7.79688, -31.0313],
[-17.3594, -10.9375, -30.6094],
[-16.9844, -12.9219, -27.9375],
[-16.9688, -13.9219, -24.5938],
[-16.9219, -13.625, -16.7344],
[-16.5, -12.1094, -15.7031],
[-15.7344, -10.3906, -11.2344],
[-14.7656, -8.71875, -5.48438],
[-13.7656, -7.04688, -0.71875],
[-13.5156, -5.85938, 3.98438],
[-14.1406, -4.48438, 6.375],
[-15.1719, -3.25, 7.23438],
[-16.2031, -1.65625, 6.78125],
[-17.1719, -0.4375, 5.8125],
[-17.6094, 0.40625, 4.04688],
[-17.4063, 0.578125, 1.73438],
[-16.5156, -0.21875, -1.21875],
[-15.1406, -2.09375, -4.65625],
[-13.4063, -3.8125, -6.60938],
[-12.2656, -5.17188, -7.42188],
[-11.5, -6.10938, -6.85938],
[-11.4844, -6.32813, -5.23438],
[-12.0313, -6.15625, -2.09375],
[-12.6563, -5.79688, 1.14063],
[-13.3125, -5.1875, 5.53125],
[-14.0313, -4.73438, 9.53125],
[-14.6563, -4.53125, 13.8594],
[-15.4219, -4.42188, 19.3906],
[-16.6875, -4.10938, 24.2813],
[-18.2031, -2.9375, 30.625],
[-20.9063, -0.984375, 36.375],
[-24.1875, 2.15625, 43.6875],
[-29.3438, 7.53125, 49.9219],
[-34.1719, 12.8281, 56.1563],
[-39.6406, 18.9219, 63.2813],
[-43.1563, 22.5469, 68.3906],
[-45.2344, 23.8906, 72.8281],
[-45.4219, 22.125, 74.5469],
[-43.5625, 17.75, 73.5938],
[-39.375, 9.75, 70.4844],
[-35.0781, 1.96875, 66.1563],
[-30.6094, -7.60938, 60.75],
[-25.7188, -15.4219, 57.625],
[-23.0313, -22.3125, 57.4844],
[-22.1875, -27.1719, 60.6406],
[-22.9844, -26.6094, 65.6094],
[-23.875, -20.9375, 71.4688],
[-23.7188, -14.5469, 74.625],
[-22.4063, -8.96875, 75.8594],
[-20.1563, -4.73438, 75.3125],
[-18.3125, -3.29688, 73.4063],
[-16.9063, -3.67188, 68.875],
[-14.8594, -5.375, 64.2031],
[-12.6563, -7.57813, 59.8594],
[-10.3125, -9.29688, 57.7188],
[-8.92188, -9.51563, 56.2188],
[-7.8125, -9.42188, 54.5781],
[-7.40625, -9.78125, 53.4688],
[-7.60938, -10.625, 53.2344],
[-8.4375, -11.4531, 54.4844],
[-9.10938, -12.4219, 58.3438],
[-9.07813, -14.3281, 63.75],
[-8.01563, -17.0156, 74.7969],
[-5.875, -21.5156, 80.4688],
[-4.03125, -25.6719, 88.2813],
[-2.51563, -29.7969, 95.4375],
[-1.35938, -31.7188, 98.3281],
[-1.0625, -31.7344, 97.6406],
[-1.21875, -28.7188, 94.0156],
[-1.375, -24.2344, 88.5781],
[-1.375, -18.2969, 81.3281],
[-1.21875, -14.1563, 75.9531],
[-1.17188, -11.4531, 71.1563],
[-1.6875, -10.2813, 68.75],
[-2.73438, -10.5625, 67.625],
[-3.9375, -12.1094, 67.75],
[-4.59375, -14.7344, 69.1719],
[-4.14063, -18.25, 72.5625],
[-2.78125, -22.4375, 77.0],
[-1.26563, -25.7813, 83.2969],
[0.375, -30.0156, 92.875],
[2.4375, -33.6406, 100.719],
[4.03125, -36.9219, 106.906],
[5.625, -39.375, 107.359],
[6.625, -39.0938, 102.453],
[7.07813, -35.0313, 90.1406],
[6.375, -28.8281, 76.5938],
[4.46875, -21.4531, 60.25],
[1.15625, -14.0156, 49.3281],
[-1.59375, -11.1563, 42.2188],
[-3.64063, -15.9688, 38.4375],
[-4.98438, -16.5938, 37.875],
[-5.42188, -21.5156, 38.3125],
[-5.625, -26.75, 38.7031],
[-5.82813, -30.0625, 39.0156],
[-6.23438, -32.5313, 39.2969],
[-7.14063, -32.8125, 39.0],
[-8.25, -31.0, 36.8594],
[-9.45313, -26.4375, 32.9219],
[-9.89063, -21.8438, 27.1406],
[-9.6875, -16.9219, 19.2344],
[-9.39063, -13.9375, 13.5],
[-9.51563, -8.10938, 9.375],
[-10.6406, -11.25, 8.53125],
[-12.25, -11.375, 9.45313],
[-14.125, -12.0469, 11.4844],
[-16.1563, -12.5313, 12.7969],
[-17.4219, -12.4219, 13.0781],
[-18.4844, -11.3438, 12.1719],
[-19.0938, -10.1719, 10.7813],
[-19.4688, -9.42188, 9.6875],
[-19.5938, -9.875, 10.0313],
[-19.4531, -11.4375, 11.9063],
[-19.3281, -12.6094, 13.8906],
[-19.4531, -12.7813, 15.3125],
[-19.8281, -11.375, 15.6563],
[-19.9531, -9.57813, 14.9375],
[-19.8281, -7.59375, 13.6563],
[-19.625, -6.29688, 12.8281],
[-19.5, -5.57813, 12.2656],
[-19.2188, -6.03125, 12.0156],
[-18.7969, -7.4375, 11.9531],
[-18.25, -9.40625, 12.0781],
[-17.9531, -10.5781, 12.1719],
[-17.8281, -11.2031, 11.8906],
[-17.8281, -11.375, 11.375],
[-17.875, -11.0469, 10.7188],
[-17.8438, -10.1406, 9.84375],
[-17.7656, -9.125, 9.15625],
[-17.625, -4.14063, 8.35938],
[-17.1719, -7.40625, 7.57813],
[-16.5, -7.40625, 6.67188],
[-15.8125, -7.84375, 5.875],
[-15.375, -8.35938, 5.76563],
[-15.5625, -9.15625, 6.20313],
[-16.5313, -10.7188, 6.8125],
[-17.8594, -12.3594, 7.6875],
[-19.4063, -14.3906, 9.3125],
[-21.0781, -16.0938, 11.2344],
[-21.9688, -17.75, 13.8281],
[-22.2344, -19.5469, 15.6875],
[-21.75, -21.0938, 16.875],
[-20.1406, -23.9063, 17.1875],
[-18.0313, -27.25, 16.5156],
[-15.7656, -31.1719, 15.0156],
[-13.8906, -32.9844, 13.8281],
[-13.5625, -32.9844, 12.9688],
[-14.6875, -31.2969, 12.75],
[-16.2188, -29.8594, 12.8906],
[-17.5625, -30.125, 13.3125],
[-17.7344, -32.5625, 13.7188],
[-17.1875, -37.1406, 14.3594],
[-16.2813, -40.9063, 15.25],
[-15.3438, -43.8281, 16.9688],
[-13.0625, -46.3438, 19.0938],
[-10.0313, -48.375, 21.7031],
[-6.6875, -50.9531, 24.7031],
[-2.82813, -52.3594, 25.9531],
[0.953125, -52.8125, 24.1719],
[5.4375, -52.6563, 19.3594],
[7.84375, -52.4219, 12.0],
[8.73438, -53.1563, 1.67188],
[8.67188, -55.6406, -6.39063],
[8.3125, -59.4844, -14.0313],
[7.5, -63.4688, -18.2969],
[6.17188, -64.1563, -20.4219],
[0.078125, -61.4844, -19.8594],
[0.71875, -57.7969, -16.7656],
[-2.51563, -54.0781, -10.6875],
[-6.71875, -50.1563, -4.92188],
[-10.1719, -47.5156, 0.546875],
[-13.75, -45.7969, 6.07813],
[-16.125, -45.6563, 9.32813],
[-18.0156, -46.3906, 10.9531],
[-19.4844, -48.0469, 10.6719],
[-19.8906, -51.1719, 9.67188],
[-19.9375, -55.6875, 9.01563],
[-20.3125, -58.0, 8.625],
[-21.9063, -57.25, 8.34375],
[-24.0625, -54.0938, 8.46875],
[-26.5156, -51.2344, 10.0938],
[-29.4219, -53.5625, 13.6719],
[-32.3281, -61.875, 18.9688],
[-36.2969, -73.1563, 24.9375],
[-39.2656, -77.4375, 27.4375],
[-41.9219, -75.1719, 26.9531],
[-44.4531, -70.5625, 24.5156],
[-45.0469, -66.1406, 20.8281],
[-40.9844, -58.9531, 15.8906],
[-38.0781, -57.4688, 15.1719],
[-36.7969, -55.8281, 15.3281],
[-36.0781, -52.2813, 15.8281],
[-35.1406, -48.9063, 15.8594],
[-32.9844, -44.9375, 14.7031],
[-29.8594, -41.9219, 12.5469],
[-27.7656, -40.0156, 9.96875],
[-26.1719, -41.4531, 9.20313],
[-25.7344, -44.8594, 10.125],
[-27.2656, -48.6406, 13.2188],
[-29.5313, -50.8594, 17.1719],
[-31.0781, -54.0, 22.4844],
[-31.1563, -56.2969, 25.7656],
[-30.5156, -55.9375, 27.4688],
[-29.1719, -53.6094, 27.5625],
[-27.3594, -51.9375, 26.6094],
[-24.5469, -52.0, 25.5],
[-21.8906, -52.9219, 24.4375],
[-18.4844, -54.3906, 22.5313],
[-13.8594, -55.25, 19.9219],
[-11.0625, -53.75, 15.7188],
[-9.40625, -47.375, 11.3438],
[-8.59375, -40.8281, 5.71875],
[-4.03125, -35.1406, -2.26563],
[-7.60938, -32.5781, -8.60938],
[-7.75, -32.0938, -14.4844],
[-8.67188, -33.9375, -17.3594],
[-9.85938, -36.6719, -18.125],
[-10.4688, -41.2656, -16.9375],
[-10.7031, -45.6875, -15.0625],
[-11.3438, -48.1094, -12.0781],
[-12.2656, -45.9531, -9.0625],
[-12.3906, -41.125, -5.73438],
[-11.5781, -35.375, -1.79688],
[-9.96875, -32.4531, 0.828125],
[-9.0, -31.1094, 2.76563],
[-9.09375, -30.1563, 4.39063],
[-10.1563, -29.0781, 5.54688],
[-11.625, -27.5156, 6.9375],
[-12.9844, -25.4219, 7.92188],
[-13.1875, -23.7813, 8.39063],
[-12.875, -21.6094, 8.21875],
[-12.75, -19.0, 7.90625],
[-12.7813, -12.125, 7.39063],
[-12.625, -13.3594, 6.73438],
[-12.0938, -11.4063, 6.0],
[-11.4531, -8.54688, 5.15625],
[-10.5781, -5.82813, 4.1875],
[-9.59375, -3.82813, 1.8125],
[-8.1875, -2.125, -1.29688],
[-7.15625, -0.125, -5.15625],
[-6.40625, 2.96875, -9.92188],
[-6.09375, 5.39063, -13.0156],
[-6.4375, 7.40625, -14.7031],
[-7.48438, 9.57813, -14.2969],
[-8.67188, 11.2656, -12.7031],
[-9.76563, 12.5625, -10.2656],
[-10.4688, 12.7656, -8.53125],
[-10.6563, 12.4844, -6.89063],
[-10.8281, 12.1094, -5.78125],
[-11.1094, 11.9844, -4.95313],
[-11.5156, 12.625, -4.3125],
[-12.1094, 14.3438, -3.90625],
[-12.5469, 17.1719, -3.67188],
[-12.9531, 21.5469, -3.9375],
[-13.3281, 25.75, -4.625],
[-13.75, 31.5625, -5.3125],
[-14.25, 36.8281, -5.21875],
[-14.5781, 40.9063, -4.53125],
[-14.5156, 41.375, -3.79688],
[-13.3125, 37.6719, -3.875],
[-11.625, 28.2188, -4.84375],
[-9.875, 26.6094, -5.89063],
[-9.23438, 24.375, -6.73438],
[-9.40625, 24.8594, -7.23438],
[-9.96875, 26.8594, -7.35938],
[-10.4844, 28.7969, -7.5625],
[-10.4688, 28.7188, -7.79688],
[-9.76563, 25.5469, -7.76563],
[-8.39063, 19.0938, -7.3125],
[-7.32813, 13.5469, -6.48438],
[-6.78125, 9.01563, -5.34375],
[-7.04688, 8.04688, -4.54688],
[-7.90625, 9.45313, -3.90625],
[-9.26563, 12.875, -3.53125],
[-10.3594, 16.1719, -3.20313],
[-11.4219, 20.8906, -2.95313],
[-12.8594, 26.3438, -3.0],
[-14.4219, 33.5313, -3.3125],
[-16.6875, 43.7656, -4.0625],
[-18.6406, 52.4375, -5.39063],
[-20.2813, 63.3438, -9.1875],
[-21.4531, 63.1563, -14.9063],
[-22.0625, 63.1875, -21.9688],
[-22.6094, 61.7969, -29.25],
[-22.5938, 59.7813, -32.0938],
[-21.5938, 55.7969, -31.0781],
[-19.0469, 47.2656, -27.7656],
[-16.5938, 38.5, -23.125],
[-14.2656, 29.8906, -19.9844],
[-13.1719, 26.0625, -18.0938],
[-12.375, 25.4219, -17.8281],
[-11.6719, 27.125, -18.875],
[-10.9219, 30.0, -20.6094],
[-10.5, 34.7813, -21.5469],
[-10.9531, 39.9844, -21.625],
[-12.9688, 47.6094, -20.7031],
[-16.0938, 55.6094, -19.7031],
[-19.875, 65.4063, -19.4844],
[-23.3281, 78.0625, -21.3125],
[-24.4531, 86.75, -25.1563],
[-24.5, 92.625, -30.2656],
[-24.0625, 93.7813, -32.7656],
[-23.8281, 91.9063, -32.2031],
[-23.7656, 85.8125, -28.7813],
[-23.25, 78.1875, -23.7969],
[-21.9219, 67.5, -17.8125],
[-19.3281, 58.1406, -14.2031],
[-16.7969, 48.7188, -12.3906],
[-13.6094, 37.5156, -12.75],
[-11.1094, 28.1094, -13.9688],
[-9.09375, 16.8438, -14.2969],
[-8.67188, 8.6875, -13.4219],
[-9.48438, 2.64063, -11.4688],
[-10.6406, 1.34375, -10.125],
[-11.4844, 2.65625, -9.46875],
[-11.5313, 5.85938, -9.46875],
[-11.0156, 9.04688, -9.35938],
[-9.89063, 13.1094, -9.14063],
[-8.46875, 16.4063, -9.14063],
[-7.03125, 19.9844, -9.35938],
[-5.73438, 22.7969, -9.125],
[-5.10938, 25.625, -7.71875],
[-4.96875, 28.8906, -5.75],
[-5.10938, 30.6563, -3.54688],
[-5.07813, 30.0156, -1.625],
[-4.375, 26.0938, -1.73438],
[-3.125, 18.9219, -7.92188],
[-1.48438, 7.75, -8.53125],
[-0.703125, -1.09375, -12.5313],
[-0.640625, -8.5625, -15.7031],
[-1.25, -11.6406, -16.2344],
[-2.01563, -12.5781, -14.5781],
[-2.54688, -11.8906, -10.2031],
[-2.625, -10.3906, -5.59375],
[-2.35938, -8.5, -0.453125],
[-2.04688, -6.17188, 2.51563],
[-2.125, -4.46875, 3.82813],
[-2.54688, -2.84375, 3.40625],
[-3.3125, -1.98438, 2.0625],
[-4.10938, -1.71875, 0.515625],
[-5.1875, -2.48438, -0.71875],
[-7.04688, -4.09375, -0.703125],
[-9.0, -6.17188, 0.84375],
[-11.7031, -7.78125, 3.1875],
[-14.0313, -7.70313, 5.8125],
[-15.9844, -6.71875, 8.28125],
[-17.1406, -6.0, 9.0625],
[-17.0156, -5.35938, 8.32813],
[-16.1875, -4.09375, 6.75],
[-15.3281, -2.57813, 4.82813],
[-14.4375, -0.78125, 2.54688],
[-13.3438, 0.265625, 0.96875],
[-12.5781, 0.6875, -0.375],
[-11.9375, 0.53125, -0.984375],
[-11.5781, 0.203125, -0.984375],
[-11.3281, 0.0, -0.484375],
[-11.1406, 0.3125, -0.28125],
[-11.3125, 1.03125, -0.859375],
[-12.1719, 1.42188, -1.5625],
[-13.5, 0.765625, -1.625],
[-15.3281, -0.046875, -0.21875],
[-17.6563, 0.609375, 1.67188],
[-19.0156, 3.42188, 3.54688],
[-19.375, 7.0, 4.0],
[-18.9688, 11.7188, 3.375],
[-18.5, 18.5156, 2.0625],
[-18.5781, 23.4688, 1.6875],
[-18.75, 26.2656, 2.875],
[-18.8438, 26.2344, 4.3125],
[-19.2188, 26.0469, 5.03125],
[-19.9063, 27.1094, 4.23438],
[-20.4531, 28.0781, 1.65625],
[-20.4531, 27.0781, -4.01563],
[-19.25, 24.2031, -10.0781],
[-17.2344, 21.0, -17.4219],
[-13.7188, 18.7031, -22.9688],
[-10.3281, 18.4844, -27.625],
[-7.4375, 20.125, -31.0469],
[-6.0, 23.3281, -31.2656],
[-6.85938, 28.3594, -28.7188],
[-9.5, 36.0313, -25.8594],
[-12.2969, 42.4844, -23.7656],
[-16.1719, 48.6094, -22.5938],
[-19.125, 51.2656, -21.9219],
[-21.1406, 51.4219, -20.7031],
[-22.5625, 49.375, -19.0156],
[-23.5, 47.4531, -16.3906],
[-24.7188, 46.9531, -11.9063],
[-26.2656, 47.9688, -8.14063],
[-26.4219, 48.8594, -6.17188],
[-25.3125, 48.9688, -6.76563],
[-24.8125, 49.7813, -7.76563],
[-24.8594, 54.0156, -6.1875],
[-26.7656, 60.9375, -1.125],
[-30.9688, 69.875, 8.70313],
[-37.1563, 80.2188, 17.8125],
[-42.4844, 87.0469, 25.6563],
[-45.5625, 91.5938, 31.9375],
[-44.0938, 91.5781, 34.3125],
[-40.8281, 89.4219, 34.5781],
[-35.2344, 86.0313, 33.4063],
[-29.5781, 83.1719, 30.5625],
[-24.9844, 80.2969, 22.8906],
[-22.375, 76.9688, 12.3594],
[-18.1875, 69.6406, -3.45313],
[-11.625, 61.875, -16.4063],
[-8.04688, 54.8594, -27.4219],
[-8.375, 49.1094, -29.9531],
[-11.3594, 46.8438, -20.9531],
[-15.4219, 48.3594, -10.7031],
[-17.8281, 54.7969, 4.0],
[-19.2813, 67.375, 18.875],
[-18.2969, 76.5313, 24.3594],
[-16.5313, 79.5938, 19.8594],
[-13.875, 74.2656, 9.35938],
[-10.5469, 65.9375, -4.53125],
[-6.20313, 56.7656, -13.1406],
[-4.48438, 51.7969, -17.4531],
[-5.75, 48.625, -17.1719],
[-8.875, 46.75, -13.7656],
[-11.1406, 44.5781, -8.42188],
[-12.2344, 41.6563, -5.20313],
[-11.625, 39.5781, -4.26563],
[-10.5156, 38.0781, -6.28125],
[-9.32813, 37.9063, -9.39063],
[-9.46875, 38.7344, -12.4063],
[-11.5313, 40.4844, -12.9688],
[-15.5469, 42.125, -11.0625],
[-23.0469, 44.5938, -5.45313],
[-29.0938, 46.5938, 0.984375],
[-32.2188, 46.9531, 8.96875],
[-30.8594, 44.3438, 14.1875],
[-27.3906, 40.2813, 16.5938],
[-23.1094, 34.1406, 14.6094],
[-20.2656, 28.3594, 9.78125],
[-17.9375, 22.3906, 2.20313],
[-15.3594, 15.9219, -4.35938],
[-13.4375, 11.5156, -10.7344],
[-11.7188, 7.26563, -13.2344],
[-10.6094, 5.21875, -12.9844],
[-9.64063, 5.23438, -10.3125],
[-8.875, 6.54688, -7.21875],
[-8.0625, 8.45313, -3.42188],
[-6.39063, 10.5938, -0.734375],
[-4.875, 11.4375, 1.0625],
[-3.65625, 11.5938, 1.84375],
[-2.78125, 10.7031, 1.65625],
[-2.28125, 8.23438, 1.25],
[-1.89063, 3.51563, 0.765625],
[-2.0625, -0.75, 0.5],
[-3.125, -4.57813, 0.359375],
[-5.03125, -8.0625, 0.078125],
[-7.79688, -10.0, -0.65625],
[-9.82813, -11.2344, -2.375],
[-11.6094, -12.0, -3.78125],
[-12.7344, -11.7813, -3.85938],
[-13.9375, -10.1719, -0.90625],
[-14.6094, -8.03125, 3.73438],
[-14.6719, -5.0, 9.84375],
[-13.9375, -2.01563, 13.4375],
[-12.6719, 1.1875, 14.5],
[-10.5313, 4.25, 12.75],
[-8.73438, 5.23438, 9.54688],
[-7.76563, 4.20313, 5.76563],
[-8.46875, 1.89063, 4.07813],
[-10.3906, -1.15625, 4.14063],
[-12.75, -5.20313, 4.75],
[-13.4219, -8.6875, 4.3125],
[-12.6406, -13.0781, 1.57813],
[-10.7969, -16.7656, -1.5625],
[-9.625, -20.0625, -4.15625],
[-9.15625, -23.2188, -4.1875],
[-9.28125, -25.375, -1.9375],
[-9.3125, -27.5, 0.8125],
[-8.76563, -28.9375, 3.54688],
[-7.48438, -30.5, 6.25],
[-5.125, -31.8594, 7.75],
[-3.09375, -33.2344, 8.53125],
[-1.45313, -34.5781, 8.76563],
[-0.84375, -35.4688, 8.5],
[-0.515625, -37.0313, 7.75],
[-0.203125, -39.0781, 6.84375],
[-0.171875, -41.5938, 5.89063],
[-0.765625, -44.625, 5.375],
[-1.84375, -46.7344, 5.6875],
[-3.21875, -48.4844, 6.23438],
[-4.15625, -49.5469, 5.9375],
[-3.5, -50.7188, 4.14063],
[-0.796875, -52.8438, 1.92188],
[2.40625, -55.375, -0.125],
[5.8125, -59.0156, -1.8125],
[9.14063, -62.1406, -2.67188],
[10.5469, -65.1563, -2.51563],
[10.7969, -67.4688, -1.17188],
[10.75, -67.3594, 0.359375],
[11.1719, -65.2969, 1.0625],
[12.3281, -63.4688, 0.4375],
[13.2031, -62.5938, -0.78125],
[13.5156, -62.8125, -1.09375],
[12.8438, -63.5, 3.84375],
[11.0625, -64.1719, 2.34375],
[9.14063, -64.3125, 4.60938],
[7.25, -64.0938, 6.51563],
[5.21875, -63.6094, 7.48438],
[3.45313, -63.2031, 8.6875],
[1.40625, -62.4844, 11.7656],
[-1.21875, -61.375, 16.0625],
[-3.125, -59.5781, 22.2969],
[-4.5625, -56.4219, 27.0156],
[-4.89063, -53.2031, 30.1406],
[-4.65625, -49.0313, 31.0469],
[-4.14063, -45.5469, 29.5469],
[-3.95313, -42.3906, 26.7813],
[-4.35938, -39.5781, 22.9688],
[-5.67188, -38.3438, 20.1094],
[-7.20313, -38.0625, 17.7813],
[-9.34375, -38.2188, 17.0625],
[-11.4219, -38.0625, 17.4063],
[-14.2188, -37.2344, 18.0],
[-16.3125, -36.6094, 18.375],
[-17.7031, -37.0469, 18.4844],
[-18.3438, -38.5781, 18.4688],
[-18.2656, -40.6875, 18.7188],
[-17.75, -43.0469, 19.2031],
[-17.0, -44.3594, 19.6875],
[-15.8594, -44.9844, 19.5],
[-14.8281, -44.7813, 18.3594],
[-13.7188, -43.7344, 16.8281],
[-12.9375, -42.375, 15.1406],
[-12.375, -40.5156, 13.4219],
[-12.0938, -39.2969, 12.3594],
[-12.0156, -39.0156, 11.4531],
[-11.875, -40.3438, 10.9063],
[-11.75, -43.3281, 10.1094],
[-11.5313, -48.5625, 8.98438],
[-11.5469, -53.7344, 7.17188],
[-11.4063, -60.2813, 4.29688],
[-10.6563, -65.75, 2.1875],
[-10.2969, -70.7031, 1.60938],
[-10.8281, -74.875, 3.51563],
[-11.5, -76.3438, 7.28125],
[-11.625, -75.6094, 12.5313],
[-10.7188, -72.9688, 15.8438],
[-9.34375, -64.5938, 17.1719],
[-7.40625, -61.4688, 15.7656],
[-5.92188, -54.7656, 12.4844],
[-4.32813, -41.4219, 2.73438],
[-4.15625, -39.0156, -0.78125],
[-4.4375, -39.625, -2.35938],
[-5.59375, -41.9844, -2.20313],
[-8.34375, -45.9844, -0.578125],
[-11.375, -49.3125, 2.20313],
[-14.4531, -52.1094, 6.96875],
[-17.8281, -52.7656, 11.5938],
[-19.75, -51.5156, 16.0313],
[-20.0469, -47.7344, 17.0313],
[-18.3906, -43.5938, 14.8281],
[-15.375, -38.7656, 8.84375],
[-10.7656, -35.2969, 2.75],
[-7.01563, -28.2813, -3.5625],
[-3.75, -29.1094, -6.54688],
[-2.26563, -26.7188, -7.0625],
[-1.6875, -23.9063, -5.375],
[-1.84375, -21.8438, -3.20313],
[-2.59375, -20.125, -0.53125],
[-4.40625, -19.0781, 1.54688],
[-6.32813, -17.9844, 3.79688],
[-8.46875, -16.5625, 5.39063],
[-9.70313, -15.4688, 6.65625],
[-10.4219, -14.3906, 7.54688],
[-10.7188, -13.6094, 7.48438],
[-10.375, -12.4688, 6.125],
[-9.1875, -11.0938, 4.07813],
[-7.78125, -9.32813, 1.76563],
[-6.34375, -6.875, -0.40625],
[-5.07813, -4.89063, -1.0625],
[-4.64063, -3.03125, -0.53125],
[-4.65625, -1.01563, 0.0625],
[-4.625, 0.140625, -0.078125],
[-4.375, 0.609375, -1.65625],
[-3.90625, 0.328125, -3.57813],
[-3.64063, -0.265625, -5.6875],
[-3.92188, -1.17188, -6.67188],
[-4.92188, -1.9375, -6.625],
[-6.54688, -2.79688, -5.625],
[-8.84375, -3.40625, -4.5625],
[-10.5625, -3.875, -3.6875],
[-11.9063, -4.28125, -3.42188],
[-12.4375, -4.57813, -3.21875],
[-12.75, -5.03125, -2.6875],
[-13.1875, -5.45313, -2.01563],
[-13.5313, -5.67188, -1.42188],
[-13.5625, -5.4375, -1.01563],
[-13.25, -5.09375, -0.953125],
[-12.7188, -4.84375, -1.17188],
[-11.875, -4.76563, -1.46875],
[-11.1563, -4.60938, -1.48438],
[-10.625, -4.21875, -0.90625],
[-10.5, -3.75, -0.046875],
[-10.3906, -3.04688, 0.4375],
[-9.85938, -2.28125, -0.0625],
[-9.21875, -1.375, -1.53125],
[-8.54688, -0.421875, -2.84375],
[-8.28125, -0.09375, -3.65625],
[-8.35938, -0.5625, -3.51563],
[-8.92188, -1.45313, -2.57813],
[-9.59375, -2.34375, -1.32813],
[-10.2188, -3.10938, -0.875],
[-10.4688, -3.5, -1.04688],
[-10.6406, -3.89063, -1.5],
[-10.9844, -4.125, -1.51563],
[-11.4219, -4.21875, -0.765625],
[-11.9063, -4.1875, 0.34375],
[-12.1094, -4.0625, 1.40625],
[-12.0313, -3.82813, 1.875],
[-11.625, -3.40625, 1.39063],
[-11.1094, -3.0, 0.3125],
[-10.5, -2.64063, -1.14063],
[-10.0, -2.625, -1.96875],
[-10.0, -2.9375, -2.15625],
[-10.5, -3.60938, -1.9375],
[-11.0781, -4.07813, -1.89063],
[-11.5469, -4.125, -2.4375],
[-11.8438, -3.82813, -3.23438],
[-11.9688, -3.42188, -3.90625],
[-12.3125, -3.07813, -3.78125],
[-12.8281, -3.17188, -2.96875],
[-13.4844, -3.85938, -1.39063],
[-14.1094, -4.60938, -0.0625],
[-14.2031, -5.03125, 0.859375],
[-13.8906, -4.76563, 1.42188],
[-13.1094, -4.14063, 1.625],
[-12.3906, -3.59375, 1.85938],
[-11.7969, -3.46875, 2.10938],
[-11.6875, -3.96875, 2.32813],
[-15.9531, -4.92188, 2.65625],
[-12.8281, -5.54688, 3.0],
[-13.8438, -5.60938, 3.28125],
[-14.75, -5.1875, 3.10938],
[-14.875, -4.96875, 2.45313],
[-14.6094, -5.25, 1.34375],
[-14.2344, -5.875, 0.6875],
[-14.1406, -6.60938, 0.671875],
[-14.3281, -7.32813, 1.25],
[-14.5313, -7.5625, 1.98438],
[-14.4063, -7.375, 2.20313],
[-13.875, -7.04688, 1.5],
[-13.2656, -6.78125, 0.15625],
[-12.7344, -6.60938, -0.75],
[-12.5625, -6.70313, -1.0625],
[-12.6719, -7.10938, -0.53125],
[-13.125, -7.5, 0.5625],
[-13.625, -7.70313, 2.32813],
[-14.0625, -7.42188, 3.40625],
[-13.9688, -6.82813, 3.48438],
[-13.4063, -6.03125, 2.3125],
[-12.4688, -5.5, 0.921875],
[-11.7969, -5.10938, -0.25],
[-11.2969, -4.95313, -0.4375],
[-11.0938, -5.15625, -0.0625],
[-11.0469, -5.65625, 0.46875],
[-11.1094, -5.98438, 0.65625],
[-11.1094, -6.09375, 0.5625],
[-10.9844, -6.0, 0.515625],
[-10.8594, -5.875, 0.828125],
[-10.875, -5.75, 1.39063],
[-11.0156, -5.67188, 1.98438],
[-11.1875, -5.625, 2.23438],
[-11.3281, -5.45313, 1.76563],
[-11.4219, -5.25, 0.90625],
[-11.5469, -5.17188, 0.078125],
[-11.7656, -5.40625, 0.0],
[-11.9688, -5.82813, 0.5625],
[-12.1406, -6.23438, 1.26563],
[-12.1406, -6.21875, 1.84375],
[-11.9531, -5.84375, 1.98438],
[-11.5469, -5.40625, 1.65625],
[-11.1563, -5.01563, 1.04688],
[-10.7656, -4.8125, 0.6875],
[-10.6406, -4.85938, 0.578125],
[-10.7344, -4.96875, 0.65625],
[-10.9531, -5.0, 0.71875],
[-11.1563, -5.0625, 0.75],
[-11.6094, -5.32813, 0.953125],
[-12.2344, -5.5625, 1.57813],
[-12.9844, -5.76563, 2.67188],
[-13.3281, -5.90625, 3.375],
[-13.4688, -6.20313, 3.65625],
[-13.4688, -6.5, 3.40625],
[-13.2813, -6.64063, 2.54688],
[-12.875, -6.64063, 1.65625],
[-12.5, -6.64063, 0.9375],
[-12.1875, -6.54688, 0.53125],
[-11.8906, -6.1875, 0.546875],
[-11.6406, -5.625, 0.890625],
[-11.3125, -4.96875, 1.29688],
[-11.0156, -4.65625, 1.67188],
[-10.7813, -4.70313, 2.0],
[-10.875, -5.0625, 2.34375],
[-11.2031, -5.53125, 2.98438],
[-11.5313, -5.8125, 3.53125],
[-11.625, -5.71875, 3.82813],
[-11.5781, -5.4375, 3.75],
[-11.5313, -5.28125, 3.5625],
[-11.6875, -5.26563, 3.48438],
[-12.1563, -5.35938, 3.57813],
[-12.625, -5.28125, 3.64063],
[-12.9844, -4.76563, 3.59375],
[-13.0156, -4.35938, 3.48438],
[-12.8438, -4.35938, 3.32813],
[-12.5938, -4.76563, 3.1875],
[-12.5, -5.20313, 2.98438],
[-12.5469, -5.5, 2.6875],
[-12.6875, -5.5625, 2.4375],
[-12.8594, -5.60938, 2.28125],
[-13.1406, -5.71875, 2.35938],
[-13.4375, -5.85938, 2.73438],
[-13.7969, -6.14063, 3.5],
[-14.2344, -6.42188, 4.09375],
[-14.4531, -6.71875, 4.40625],
[-14.4063, -7.04688, 4.25],
[-14.1406, -7.3125, 3.76563],
[-13.7031, -7.65625, 2.875],
[-13.1719, -7.95313, 2.10938],
[-12.8438, -8.35938, 1.57813],
[-12.6563, -8.875, 1.40625],
[-12.7188, -9.09375, 1.60938],
[-12.9375, -8.90625, 1.82813],
[-13.125, -8.03125, 1.6875],
[-13.0469, -7.01563, 1.28125],
[-12.7031, -6.0625, 0.796875],
[-12.3906, -5.78125, 0.65625],
[-12.25, -5.96875, 0.984375],
[-12.375, -6.60938, 1.64063],
[-12.5313, -7.26563, 2.32813],
[-12.4844, -7.875, 2.59375],
[-12.1094, -8.1875, 2.1875],
[-11.75, -8.375, 1.5625],
[-11.5469, -8.54688, 1.45313],
[-11.6719, -8.78125, 1.875],
[-12.0313, -9.28125, 2.90625],
[-12.5625, -9.71875, 3.73438],
[-12.7969, -9.90625, 4.01563],
[-12.6094, -9.59375, 3.4375],
[-12.0625, -9.01563, 2.26563],
[-11.3594, -8.42188, 0.84375],
[-10.7969, -8.23438, 0.34375],
[-10.75, -8.32813, 0.625],
[-11.0781, -8.59375, 1.625],
[-11.4844, -8.6875, 2.48438],
[-11.7969, -8.53125, 3.01563],
[-11.8438, -8.34375, 2.92188],
[-11.7188, -8.34375, 2.5],
[-11.6719, -8.75, 2.0],
[-11.8438, -9.29688, 1.95313],
[-12.1094, -9.85938, 2.28125],
[-12.2656, -10.2656, 2.39063],
[-12.1719, -10.1563, 2.17188],
[-11.9531, -9.5, 1.92188],
[-11.6719, -8.92188, 2.0625],
[-11.5313, -8.5625, 2.70313],
[-11.625, -8.45313, 3.40625],
[-11.8906, -8.54688, 4.09375],
[-12.3125, -8.71875, 4.59375],
[-12.7969, -8.6875, 4.64063],
[-12.9531, -8.57813, 4.28125],
[-12.7344, -8.64063, 3.39063],
[-12.1875, -8.84375, 2.57813],
[-11.7969, -9.01563, 1.92188],
[-11.6563, -9.25, 1.82813],
[-11.8281, -9.65625, 2.125],
[-11.9375, -10.2813, 2.65625],
[-11.7969, -10.5625, 2.89063],
[-11.5313, -10.4063, 2.875],
[-11.2344, -9.84375, 2.89063],
[-11.0469, -9.375, 3.14063],
[-10.9375, -9.09375, 3.84375],
[-10.9375, -9.07813, 4.59375],
[-11.0781, -9.10938, 5.35938],
[-11.25, -8.9375, 5.59375],
[-11.25, -8.60938, 5.42188],
[-11.125, -8.15625, 5.01563],
[-10.9531, -7.84375, 4.89063],
[-10.9531, -7.75, 5.29688],
[-11.2344, -7.92188, 6.0],
[-11.5938, -8.14063, 6.5625],
[-11.7656, -8.23438, 6.3125],
[-11.5313, -8.04688, 5.29688],
[-11.0156, -7.79688, 3.9375],
[-10.375, -7.625, 2.375],
[-9.75, -7.53125, 1.42188],
[-9.4375, -7.39063, 0.8125],
[-9.25, -7.0625, 0.453125],
[-9.15625, -6.70313, 0.40625],
[-9.04688, -6.375, 0.453125],
[-8.95313, -6.15625, 0.375],
[-8.90625, -6.09375, 0.28125],
[-8.98438, -6.10938, 0.390625],
[-9.17188, -6.1875, 0.71875],
[-9.34375, -6.28125, 1.04688],
[-9.57813, -6.28125, 1.20313],
[-9.875, -6.125, 1.35938],
[-10.3281, -5.85938, 1.5],
[-10.6563, -5.6875, 1.48438],
[-10.8906, -5.5, 1.34375],
[-11.1094, -5.25, 1.34375],
[-11.2813, -5.0625, 1.5625],
[-11.4219, -4.98438, 1.98438],
[-11.5156, -5.03125, 2.26563],
[-11.5156, -5.17188, 2.35938],
[-11.5156, -5.39063, 2.35938],
[-11.5625, -5.4375, 2.48438],
[-11.6406, -5.26563, 2.92188],
[-11.6406, -4.79688, 3.40625],
[-11.6094, -4.39063, 3.82813],
[-11.3438, -4.10938, 3.79688],
[-10.8438, -4.0, 3.17188],
[-10.3125, -3.79688, 2.03125],
[-9.95313, -3.60938, 1.15625],
[-9.8125, -3.57813, 0.4375],
[-9.76563, -3.73438, 0.09375],
[-9.98438, -3.95313, 0.109375],
[-10.5781, -4.20313, 0.75],
[-11.4375, -4.29688, 1.64063],
[-11.7344, -4.34375, 2.29688],
[-11.6094, -4.53125, 2.21875],
[-11.4531, -4.84375, 1.57813],
[-11.4688, -5.09375, 0.765625],
[-11.625, -5.07813, 0.421875],
[-11.6406, -5.03125, 0.453125],
[-11.5156, -5.01563, 0.6875],
[-11.4531, -5.0, 1.04688],
[-11.5, -4.8125, 1.48438],
[-11.5313, -4.53125, 1.60938],
[-11.3438, -4.1875, 1.40625],
[-10.8594, -3.76563, 0.9375],
[-10.4531, -3.40625, 0.625],
[-10.2344, -3.0, 0.53125],
[-10.2188, -2.4375, 0.515625],
[-10.2188, -1.96875, 0.234375],
[-10.0, -1.64063, -0.59375],
[-9.59375, -1.67188, -1.5],
[-9.39063, -1.98438, -2.125],
[-9.40625, -2.625, -2.17188],
[-9.45313, -3.21875, -1.875],
[-9.40625, -3.70313, -1.64063],
[-9.39063, -4.03125, -1.54688],
[-9.46875, -4.1875, -1.3125],
[-9.51563, -4.34375, -0.828125],
[-9.5, -4.51563, -0.453125],
[-9.59375, -4.625, -0.171875],
[-9.76563, -4.625, 0.0],
[-9.73438, -4.45313, -0.078125],
[-9.42188, -4.10938, -0.46875],
[-8.875, -3.6875, -0.8125],
[-8.46875, -3.4375, -1.17188],
[-8.0625, -3.26563, -1.60938],
[-7.82813, -3.35938, -2.17188],
[-7.79688, -7.875, -2.76563],
[-7.98438, -4.71875, -3.0],
[-8.17188, -5.07813, -3.04688],
[-8.26563, -4.89063, -3.03125],
[-8.32813, -4.5625, -2.95313],
[-8.4375, -4.5, -2.6875],
[-8.67188, -4.95313, -2.375],
[-8.84375, -5.51563, -2.10938],
[-8.8125, -6.15625, -2.03125],
[-8.45313, -6.48438, -2.125],
[-8.07813, -6.59375, -2.25],
[-7.79688, -6.48438, -2.28125],
[-7.8125, -6.29688, -2.17188],
[-7.96875, -6.10938, -1.84375],
[-8.15625, -6.04688, -1.5625],
[-8.15625, -6.04688, -1.45313],
[-7.90625, -6.1875, -1.76563],
[-7.60938, -6.39063, -2.3125],
[-7.42188, -6.59375, -2.76563],
[-7.53125, -6.67188, -2.71875],
[-7.875, -6.6875, -2.34375],
[-8.26563, -6.71875, -1.71875],
[-8.625, -6.71875, -1.28125],
[-8.78125, -6.625, -1.01563],
[-8.85938, -6.4375, -1.01563],
[-8.89063, -6.40625, -1.01563],
[-9.01563, -6.60938, -0.8125],
[-9.3125, -6.8125, -0.5],
[-9.64063, -6.78125, -0.25],
[-10.0469, -6.46875, -0.28125],
[-10.3594, -6.29688, -0.4375],
[-10.6406, -6.4375, -0.5],
[-11.0156, -6.79688, -0.453125],
[-11.3125, -7.15625, -0.5],
[-11.5313, -7.35938, -0.703125],
[-11.6875, -7.3125, -0.890625],
[-11.7656, -7.10938, -0.984375],
[-11.8594, -6.8125, -1.09375],
[-11.9844, -6.60938, -1.25],
[-12.0781, -6.46875, -1.3125],
[-12.0156, -6.45313, -1.125],
[-11.7656, -6.40625, -0.75],
[-11.3125, -6.26563, -0.421875],
[-11.0, -6.15625, -0.09375],
[-10.8438, -6.09375, 0.421875],
[-10.9375, -5.98438, 1.1875],
[-10.7344, -5.84375, 0.71875],
[-10.4219, -5.4375, -0.328125],
[-9.98438, -5.0625, -1.20313],
[-9.78125, -4.89063, -1.75],
[-9.8125, -4.96875, -1.92188],
[-10.0156, -5.21875, -1.85938],
[-10.1719, -5.5625, -1.8125],
[-10.2344, -5.90625, -1.92188],
[-10.2031, -6.03125, -2.07813],
[-10.1719, -6.07813, -2.0625],
[-10.0938, -6.07813, -1.76563],
[-10.0469, -6.10938, -1.1875],
[-10.0469, -6.10938, -0.75],
[-10.125, -6.04688, -0.484375],
[-10.25, -6.0, -0.140625],
[-10.4063, -6.125, 0.234375],
[-10.5, -6.35938, 0.640625],
[-10.5781, -6.625, 0.765625],
[-10.6875, -6.76563, 0.796875],
[-10.9219, -6.92188, 0.875],
[-11.2344, -7.01563, 1.03125],
[-11.625, -7.04688, 1.35938],
[-12.0781, -7.17188, 1.70313],
[-12.25, -7.45313, 2.07813],
[-12.2344, -7.92188, 2.375],
[-12.1406, -8.17188, 2.34375],
[-12.0, -8.10938, 1.9375],
[-11.7188, -7.85938, 1.51563],
[-11.4844, -7.8125, 1.20313],
[-11.3438, -7.98438, 1.07813],
[-11.375, -8.15625, 1.17188],
[-11.5, -8.15625, 1.4375],
[-11.6406, -8.03125, 1.6875],
[-11.6875, -7.9375, 1.78125],
[-11.5781, -7.84375, 1.46875],
[-11.2656, -7.67188, 0.90625],
[-10.9063, -7.32813, 0.171875],
[-10.3906, -6.875, -0.28125],
[-10.0156, -6.59375, -0.5625],
[-9.79688, -6.375, -0.640625],
[-9.71875, -6.32813, -0.484375],
[-9.79688, -6.39063, -0.21875],
[-9.95313, -6.48438, 0.0625],
[-10.0781, -6.53125, 0.28125],
[-10.1719, -6.625, 0.5],
[-10.125, -6.71875, 0.546875],
[-9.9375, -6.67188, 0.421875],
[-9.70313, -6.4375, 0.25],
[-9.60938, -6.26563, 0.171875],
[-9.60938, -6.15625, 0.0],
[-9.59375, -6.01563, -0.3125],
[-9.54688, -5.85938, -0.5625],
[-9.48438, -5.82813, -0.484375],
[-9.46875, -5.84375, -0.1875],
[-9.54688, -5.85938, 0.203125],
[-9.75, -5.92188, 0.375],
[-9.92188, -6.0625, 0.4375],
[-10.1094, -6.35938, 0.46875],
[-10.2813, -6.71875, 0.53125],
[-10.4531, -7.17188, 0.671875],
[-10.6563, -7.4375, 0.84375],
[-10.7813, -7.5, 0.984375],
[-10.9063, -7.25, 1.0],
[-10.9688, -6.90625, 1.0],
[-11.0156, -6.625, 1.07813],
[-11.0625, -6.59375, 1.21875],
[-11.0313, -6.70313, 1.32813],
[-11.0156, -6.82813, 1.3125],
[-11.0313, -6.84375, 1.25],
[-11.0781, -7.0, 1.25],
[-11.2969, -7.3125, 1.375],
[-11.6563, -7.67188, 1.625],
[-12.1875, -7.98438, 1.98438],
[-12.6094, -8.14063, 2.1875],
[-12.9375, -8.14063, 2.15625],
[-13.1563, -7.82813, 1.98438],
[-13.1875, -7.40625, 1.8125],
[-13.1563, -7.01563, 1.8125],
[-13.3594, -7.0, 1.9375],
[-13.7969, -7.375, 2.14063],
[-14.1875, -7.73438, 2.25],
[-13.9688, -7.84375, 2.21875],
[-13.0, -7.82813, 1.89063],
[-12.0781, -7.85938, 1.32813],
[-11.4375, -7.90625, 0.734375],
[-11.125, -7.82813, 0.609375],
[-11.0938, -7.67188, 0.828125],
[-11.1406, -7.46875, 1.07813],
[-11.2344, -7.25, 1.25],
[-11.3906, -7.09375, 1.20313],
[-11.5, -7.07813, 0.859375],
[-11.375, -7.17188, 0.265625],
[-11.0313, -7.32813, -0.546875],
[-10.6563, -7.46875, -1.04688],
[-10.3438, -7.60938, -1.04688],
[-10.1563, -7.71875, -0.640625],
[-10.1563, -7.82813, -0.078125],
[-10.1719, -7.85938, 0.109375],
[-10.1094, -7.78125, 0.0],
[-10.1094, -7.64063, -0.34375],
[-10.1875, -7.53125, -0.625],
[-10.2344, -7.40625, -0.953125],
[-10.1406, -7.20313, -1.14063],
[-9.98438, -7.0, -1.125],
[-9.89063, -6.76563, -0.921875],
[-9.90625, -6.5625, -0.71875],
[-9.90625, -6.39063, -0.515625],
[-9.75, -6.3125, -0.34375],
[-9.54688, -6.34375, -0.171875],
[-9.35938, -6.46875, -0.046875],
[-9.32813, -6.60938, 0.0],
[-9.46875, -6.79688, 0.046875],
[-9.625, -6.875, 0.0],
[-9.625, -6.89063, -0.265625],
[-9.53125, -6.82813, -0.484375],
[-9.5, -6.75, -0.328125],
[-9.625, -6.79688, 0.125],
[-9.90625, -6.9375, 0.640625],
[-10.2031, -7.03125, 1.01563],
[-10.3594, -6.90625, 1.09375],
[-10.2813, -6.65625, 0.96875],
[-10.0313, -6.40625, 0.390625],
[-9.70313, -6.32813, -0.34375],
[-9.54688, -6.375, -1.10938],
[-9.54688, -6.75, -1.46875],
[-9.67188, -7.32813, -1.57813],
[-9.875, -8.04688, -1.32813],
[-10.1719, -8.42188, -0.796875],
[-10.3125, -8.5625, -0.0625],
[-10.2969, -8.5, 0.375],
[-10.0781, -8.26563, 0.578125],
[-9.6875, -7.85938, 0.546875],
[-9.15625, -7.4375, 0.34375],
[-8.73438, -6.90625, 0.0],
[-8.39063, -6.29688, -0.21875],
[-8.35938, -6.01563, -0.25],
[-8.60938, -6.09375, -0.015625],
[-9.14063, -6.57813, 0.296875],
[-9.625, -7.23438, 0.703125],
[-10.0938, -7.875, 0.9375],
[-10.3906, -8.04688, 1.07813],
[-10.6875, -7.90625, 1.14063],
[-11.0156, -7.71875, 1.20313],
[-11.2188, -7.60938, 1.3125],
[-11.2813, -7.51563, 1.26563],
[-11.1094, -7.35938, 0.984375],
[-10.7344, -6.98438, 0.390625],
[-10.1875, -6.5625, -0.046875],
[-9.78125, -6.15625, -0.296875],
[-9.4375, -5.75, -0.21875],
[-9.26563, -5.53125, -0.03125],
[-9.0625, -5.5, -0.0625],
[-8.70313, -5.5, -0.453125],
[-8.375, -5.39063, -0.9375],
[-8.17188, -5.125, -1.26563],
[-8.20313, -4.9375, -1.23438],
[-8.40625, -4.92188, -1.07813],
[-8.67188, -5.14063, -1.0625],
[-8.84375, -5.29688, -1.29688],
[-8.92188, -5.26563, -1.73438],
[-8.90625, -4.85938, -2.09375],
[-8.84375, -4.35938, -2.3125],
[-8.79688, -3.875, -2.375],
[-8.71875, -3.76563, -2.32813],
[-8.54688, -3.85938, -2.28125],
[-8.23438, -3.92188, -2.1875],
[-7.95313, -3.79688, -2.01563],
[-7.75, -3.60938, -1.70313],
[-7.73438, -3.51563, -1.40625],
[-7.875, -3.51563, -1.07813],
[-8.0, -3.73438, -0.953125],
[-7.9375, -4.01563, -1.39063],
[-7.6875, -4.14063, -2.5625],
[-7.3125, -4.01563, -3.625],
[-7.125, -3.84375, -4.375],
[-7.21875, -3.8125, -4.65625],
[-7.6875, -4.04688, -4.46875],
[-8.23438, -4.54688, 0.0],
[-8.73438, -5.26563, -3.35938],
[-9.09375, -5.65625, -3.01563],
[-9.20313, -5.6875, -2.8125],
[-9.14063, -5.40625, -2.59375],
[-9.04688, -5.21875, -2.21875],
[-9.01563, -5.23438, -1.65625],
[-9.0625, -5.4375, -1.39063],
[-9.15625, -5.67188, -1.46875],
[-9.29688, -5.73438, -1.64063],
[-9.34375, -5.57813, -1.6875],
[-9.29688, -5.45313, -1.59375],
[-9.17188, -5.48438, -1.53125],
[-9.01563, -5.54688, -1.53125],
[-8.71875, -5.65625, -1.65625],
[-8.4375, -5.75, -1.96875],
[-8.17188, -5.82813, -2.53125],
[-7.89063, -5.98438, -2.9375],
[-7.78125, -6.1875, -3.07813],
[-7.82813, -6.39063, -2.89063],
[-8.01563, -6.35938, -2.64063],
[-8.1875, -6.0625, -2.60938],
[-8.1875, -5.45313, -2.82813],
[-8.0, -5.0, -3.0625],
[-7.78125, -4.92188, -3.15625],
[-7.73438, -5.25, -2.98438],
[-7.8125, -5.625, -2.71875],
[-7.98438, -5.78125, -2.64063],
[-8.0, -5.64063, -2.84375],
[-7.75, -5.32813, -3.4375],
[-7.03125, -5.0625, -3.96875],
[-6.375, -4.84375, -4.28125],
[-5.84375, -4.625, -4.34375],
[-5.71875, -4.46875, -4.1875],
[-5.78125, -4.42188, -3.875],
[-5.84375, -4.54688, -3.65625],
[-5.82813, -4.75, -3.51563],
[-5.78125, -4.9375, -3.4375],
[-5.84375, -5.0, -3.39063],
[-6.03125, -4.9375, -3.375],
[-6.28125, -4.71875, -3.34375],
[-6.45313, -4.65625, -3.26563],
[-6.53125, -4.78125, -3.26563],
[-6.5, -4.85938, -3.51563],
[-6.42188, -4.79688, -4.09375],
[-6.35938, -4.57813, -4.59375],
[-6.34375, -4.46875, -4.89063],
[-6.40625, -4.51563, -5.0],
[-6.65625, -4.64063, -4.98438],
[-6.95313, -4.75, -4.84375],
[-7.35938, -4.90625, -4.51563],
[-7.70313, -5.125, -4.0],
[-8.0625, -5.46875, -3.25],
[-8.51563, -5.92188, -2.65625],
[-8.89063, -6.15625, -2.125],
[-9.20313, -6.17188, -1.67188],
[-9.40625, -5.98438, -1.40625],
[-9.46875, -5.78125, -1.07813],
[-9.5625, -5.78125, -0.640625],
[-9.78125, -5.9375, 0.0],
[-10.125, -6.25, 0.90625],
[-10.625, -6.625, 1.5],
[-11.0313, -7.10938, 1.79688],
[-11.3594, -7.76563, 1.75],
[-11.625, -8.29688, 1.375],
[-11.7344, -8.70313, 0.65625],
[-11.625, -8.875, 0.046875],
[-11.4375, -8.8125, -0.4375],
[-11.2969, -8.73438, -0.609375],
[-11.2813, -8.875, -0.3125],
[-11.3594, -9.15625, 0.453125],
[-11.4844, -9.46875, 1.26563],
[-11.5156, -9.59375, 1.98438],
[-11.3906, -9.57813, 2.39063],
[-10.9375, -9.375, 2.17188],
[-10.3281, -9.0625, 1.32813],
[-9.5625, -8.65625, 0.421875],
[-9.15625, -8.34375, -0.296875],
[-9.03125, -8.0625, -0.6875],
[-9.26563, -7.98438, -0.46875],
[-9.65625, -8.04688, 0.3125],
[-10.0938, -8.23438, 1.20313],
[-10.3438, -8.40625, 2.01563],
[-10.4063, -8.54688, 2.625],
[-10.2031, -8.59375, 2.60938],
[-9.75, -8.53125, 1.79688],
[-9.04688, -8.28125, 0.734375],
[-8.51563, -8.03125, -0.203125],
[-8.20313, -7.95313, -0.71875],
[-8.1875, -8.10938, -0.640625],
[-8.42188, -8.26563, -0.21875],
[-8.84375, -8.28125, 0.203125],
[-9.21875, -8.23438, 0.578125],
[-9.53125, -8.32813, 0.828125],
[-9.625, -8.5, 0.8125],
[-9.625, -8.59375, 0.671875],
[-9.5625, -8.45313, 0.640625],
[-9.45313, -8.17188, 0.71875],
[-9.39063, -7.70313, 0.8125],
[-9.34375, -7.32813, 0.78125],
[-9.25, -7.07813, 0.609375],
[-9.125, -7.125, 0.484375],
[-9.09375, -7.40625, 0.5],
[-9.25, -7.85938, 0.8125],
[-9.48438, -8.1875, 1.20313],
[-9.71875, -8.40625, 1.64063],
[-9.875, -8.42188, 1.84375],
[-9.92188, -8.32813, 1.75],
[-9.90625, -8.0625, 1.39063],
[-9.92188, -7.73438, 0.96875],
[-10.0156, -7.4375, 0.765625],
[-10.25, -7.46875, 0.890625],
[-10.4844, -7.57813, 1.1875],
[-10.8438, -7.39063, 1.45313],
[-11.1875, -6.95313, 1.71875],
[-11.5156, -6.5625, 1.875],
[-11.8125, -6.46875, 1.79688],
[-11.875, -6.5, 1.625],
[-11.6094, -6.5625, 1.25],
[-11.1875, -6.59375, 0.78125],
[-10.7813, -6.51563, 0.15625],
[-10.4688, -6.32813, -0.1875],
[-10.3438, -6.21875, -0.203125],
[-10.3281, -6.125, 0.078125],
[-10.3438, -6.10938, 0.453125],
[-10.2656, -6.21875, 0.8125],
[-10.0156, -6.28125, 0.84375],
[-9.67188, -6.14063, 0.5],
[-9.1875, -5.76563, 0.03125],
[-8.8125, -5.5625, -0.34375],
[-8.57813, -5.60938, -0.359375],
[-8.625, -5.75, 0.0625],
[-8.95313, -5.79688, 0.75],
[-9.45313, -5.64063, 1.1875],
[-9.79688, -5.39063, 1.42188],
[-9.96875, -5.14063, 1.28125],
[-9.95313, -4.98438, 0.703125],
[-9.85938, -4.875, -0.3125],
[-9.73438, -4.98438, -1.09375],
[-9.71875, -5.21875, -1.64063],
[-9.84375, -5.28125, -2.03125],
[-10.1094, -5.01563, -2.10938],
[-10.375, -4.6875, -1.89063],
[-10.7031, -4.51563, -1.26563],
[-10.9219, -4.60938, -0.71875],
[-11.0, -4.92188, -0.4375],
[-10.9063, -5.21875, -0.5],
[-10.7344, -5.35938, -0.5625],
[-10.4688, -5.28125, -0.40625],
[-10.2188, -5.09375, -0.078125],
[-9.95313, -4.85938, 0.53125],
[-9.60938, -4.5, 1.1875],
[-9.34375, -4.15625, 1.73438],
[-9.14063, -3.625, 1.9375],
[-8.98438, -3.1875, 1.625],
[-8.89063, -2.89063, 0.921875],
[-8.60938, -2.79688, -0.265625],
[-8.17188, -2.84375, -1.5],
[-7.6875, -2.71875, -3.0],
[-7.26563, -2.48438, -3.76563],
[-7.1875, -2.29688, -3.70313],
[-7.39063, -2.34375, -3.09375],
[-7.6875, -2.5625, -2.45313],
[-7.96875, -2.875, -1.9375],
[-8.20313, -3.1875, -1.70313],
[-8.29688, -3.35938, -1.625],
[-8.29688, -3.48438, -1.75],
[-8.20313, -3.51563, -2.0],
[-8.125, -3.45313, -2.3125],
[-8.07813, -3.28125, -2.51563],
[-8.01563, -3.21875, -2.70313],
[-7.85938, -3.35938, -3.04688],
[-7.76563, -3.57813, -3.25],
[-7.89063, -3.60938, -3.10938],
[-8.07813, -3.64063, -2.53125],
[-8.29688, -3.85938, -2.10938],
[-8.39063, -4.1875, -1.89063],
[-8.375, -4.51563, -1.78125],
[-8.39063, -4.6875, -1.65625],
[-8.51563, -4.76563, -1.60938],
[-9.07813, -4.6875, -1.64063],
[-9.46875, -4.75, -1.40625],
[-9.8125, -4.82813, -1.0625],
[-10.0625, -4.85938, -0.6875],
[-10.0781, -4.90625, -0.546875],
[-9.84375, -4.92188, -0.65625],
[-9.46875, -4.95313, -0.953125],
[-9.1875, -5.1875, -1.35938],
[-9.03125, -5.82813, -1.79688],
[-9.07813, -6.4375, -2.03125],
[-9.32813, -6.90625, -2.03125],
[-9.875, -7.25, -1.67188],
[-10.4531, -7.48438, -1.0],
[-11.0313, -7.78125, -0.109375],
[-11.5625, -7.9375, 0.375],
[-11.8438, -7.9375, 0.59375],
[-11.9219, -7.98438, 0.59375],
[-11.7813, -8.15625, 0.59375],
[-11.5469, -8.40625, 0.609375],
[-11.2969, -8.39063, 0.640625],
[-11.25, -8.14063, 0.859375],
[-11.375, -7.75, 1.25],
[-11.5313, -7.60938, 1.71875],
[-11.6719, -7.78125, 2.03125],
[-11.7969, -8.04688, 2.0],
[-11.875, -8.25, 1.73438],
[-11.9531, -8.42188, 1.54688],
[-12.0313, -8.5625, 1.46875],
[-12.1563, -8.64063, 1.5625],
[-12.3125, -8.64063, 1.8125],
[-12.4219, -8.67188, 2.1875],
[-12.4219, -8.84375, 2.65625],
[-12.2813, -8.98438, 2.78125],
[-12.0781, -8.92188, 2.4375],
[-11.7188, -8.46875, 1.8125],
[-11.3906, -7.875, 1.15625],
[-11.0938, -7.20313, 0.625],
[-10.8438, -6.89063, 0.453125],
[-10.7813, -6.875, 0.421875],
[-10.8125, -6.98438, 0.46875],
[-10.875, -6.96875, 0.484375],
[-10.9219, -6.78125, 0.453125],
[-10.9531, -6.64063, 0.375],
[-10.8906, -6.60938, 0.21875],
[-10.7344, -6.65625, 0.0625]]

        #self.test_gyro = QMI8658_Accelerometer()
        # serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # serversocket.bind(('localhost', 8089))
        # serversocket.listen(5)  # become a server socket, maximum 5 connections
        # connection, address = serversocket.accept()
        # self.connection = connection
        # self.ser = serial.Serial(
        #      '/dev/ttyACM0',
        #      baudrate=115200,
        #      timeout=0.01)

        # mouseWatcherNode actually also handles keyboard
        # self.isDown = base.mouseWatcherNode.is_button_down

        # base.accept("alt", self.alt_down)
        # base.accept("alt-up", self.alt_up)
        # base.accept("ctrl", self.ctrl_down)
        # base.accept("ctrl-up", self.ctrl_up)

        self.drone.start()
        self.drone.hide()


    def set_initial_position(self, pos, target):
        """ Sets the initial camera position """
        self.initial_position = pos
        self.initial_destination = target
        self.use_hpr = False
        self.reset_to_initial()

    def set_initial_position_hpr(self, pos, hpr):
        """ Sets the initial camera position """
        self.initial_position = pos
        self.initial_hpr = hpr
        self.use_hpr = True
        self.reset_to_initial()

    def set_scale(self, size):
        self.size = size
        self.drone.setScale(self.size)

    def reset_to_initial(self):
        """ Resets the camera to the initial position """
        base.camera.set_pos(self.initial_position)

        if self.use_hpr:
            base.camera.set_hpr(self.initial_hpr)
        else:
            base.camera.look_at(
                self.initial_destination.x, self.initial_destination.y,
                self.initial_destination.z)

    def set_movement(self, direction, amount):
        self.movement[direction] = amount

    def set_hpr_movement(self, direction, amount):
        self.hpr_movement[direction] = amount

    def alt_down(self):
        self.freelook_activated = True

    def alt_up(self):
        self.freelook_activated = False

    def ralt_down(self):
        self.pre_reset_glasses_rotation = list(map(float, self.xrsdk.ReadArSensors().split(",")))
        self.xrsdk.Reset()
        current_glasses_rotation = list(map(float, self.xrsdk.ReadArSensors().split(",")))
        self.current_glasses_rotation = Quat(current_glasses_rotation[3], current_glasses_rotation[0],
                                              current_glasses_rotation[1], current_glasses_rotation[2])


        new_quat = self.unity_to_panda3d_quaternion(
            Quat(current_glasses_rotation[0], current_glasses_rotation[1], current_glasses_rotation[2], current_glasses_rotation[3]))
        flip_rotation = Quat()
        flip_rotation.setFromAxisAngle(180, Vec3(0, 0, 1))
        self.working_current_glasses_rotation = (flip_rotation * Quat(new_quat[3], new_quat[0], new_quat[1], new_quat[2]))

        self.current_rotation = self.drone.get_quat()
        self.current_camera_rotation = base.camera.get_quat()
        #self.current_rotation = self.drone.get_hpr()

        #base.camera.set_quat(self.current_glasses_rotation)
        self.firstpersonlook_activated = True

    def ralt_up(self):
        #base.camera.set_hpr(self.current_rotation)
        #self.drone.set_hpr(self.current_rotation)
        #base.camera.set_quat(self.current_rotation)
        #self.drone.set_quat(self.current_rotation)
        self.firstpersonlook_activated = False

    def ctrl_down(self):
        self.ctrl_activated = True

    def ctrl_up(self):
        self.ctrl_activated = False

    def shift_down(self):
        self.shift_activated = True

    def shift_up(self):
        self.shift_activated = False

    def wheel_up(self):
        if self.ctrl_activated:
            self.ctrl_wheel_up()
        else:
            if self.freelook_activated:
                self.alt_wheel_up()
            if self.shift_activated:
                self.shift_wheel_up()

    def wheel_down(self):
        if self.ctrl_activated:
            self.ctrl_wheel_down()
        else:
            if self.freelook_activated:
                self.alt_wheel_down()
            if self.shift_activated:
                self.shift_wheel_down()

    def ctrl_wheel_up(self):
        self.size = self.value_selector.increase_value(self.size)
        self.set_scale(self.size)

    def ctrl_wheel_down(self):
        self.size = self.value_selector.decrease_value(self.size)
        self.set_scale(self.size)

    def alt_wheel_up(self):
        self.freelook_distance = self.value_selector.decrease_value(self.freelook_distance)

    def alt_wheel_down(self):
        self.current_freelook_rot_r = base.camera.get_r()
        self.freelook_distance = self.value_selector.increase_value(self.freelook_distance)

    def shift_wheel_up(self):
        self.speed = self.value_selector.increase_value(self.speed)

    def shift_wheel_down(self):
        self.speed = self.value_selector.decrease_value(self.speed)

    def mmb_down(self):
        self.mmb_activated = True

    def mmb_up(self):
        self.mmb_activated = False

    def unbind(self):
        """ Unbinds the movement controler and restores the previous state """
        raise NotImplementedError()

    @property
    def clock_obj(self):
        return base.taskMgr.globalClock

    def setup(self):
        """ Attaches the movement controller and inits the keybindings """
        # x
        base.accept("raw-w", self.set_movement, [0, 1])
        base.accept("raw-w-up", self.set_movement, [0, 0])
        base.accept("raw-s", self.set_movement, [0, -1])
        base.accept("raw-s-up", self.set_movement, [0, 0])

        # y
        base.accept("raw-a", self.set_movement, [1, -1])
        base.accept("raw-a-up", self.set_movement, [1, 0])
        base.accept("raw-d", self.set_movement, [1, 1])
        base.accept("raw-d-up", self.set_movement, [1, 0])

        # z
        base.accept("raw-e", self.set_movement, [2, 1])
        base.accept("raw-e-up", self.set_movement, [2, 0])
        base.accept("raw-q", self.set_movement, [2, -1])
        base.accept("raw-q-up", self.set_movement, [2, 0])

        # wireframe + debug + buffer viewer
        # base.accept("f3", base.toggle_wireframe)
        # base.accept("f11", lambda: base.win.save_screenshot("screenshot.png"))
        # base.accept("j", self.print_position)

        # mouse
        # base.accept("mouse1", self.set_mouse_enabled, [True])
        # base.accept("mouse1-up", self.set_mouse_enabled, [False])

        # arrow mouse navigation
        # base.accept("arrow_up", self.set_hpr_movement, [1, 1])
        # base.accept("arrow_up-up", self.set_hpr_movement, [1, 0])
        # base.accept("arrow_down", self.set_hpr_movement, [1, -1])
        # base.accept("arrow_down-up", self.set_hpr_movement, [1, 0])
        # base.accept("arrow_left", self.set_hpr_movement, [0, 1])
        # base.accept("arrow_left-up", self.set_hpr_movement, [0, 0])
        # base.accept("arrow_right", self.set_hpr_movement, [0, -1])
        # base.accept("arrow_right-up", self.set_hpr_movement, [0, 0])

        # Alt freelook scroll
        base.accept("mouse2", self.mmb_down)
        base.accept("mouse2-up", self.mmb_up)
        base.accept("control", self.ctrl_down)
        base.accept("control-up", self.ctrl_up)
        base.accept("lalt", self.alt_down)
        base.accept("lalt-up", self.alt_up)
        base.accept("shift", self.shift_down)
        base.accept("shift-up", self.shift_up)
        base.accept("wheel_down", self.wheel_down)
        base.accept("wheel_up", self.wheel_up)
        base.accept("ralt", self.ralt_down)
        base.accept("ralt-up", self.ralt_up)
        # base.accept("alt-wheel_up", self.alt_wheel_up)
        # base.accept("alt-wheel_down", self.alt_wheel_down)
        # base.accept("shift-wheel_up", self.shift_wheel_up)
        # base.accept("shift-wheel_down", self.shift_wheel_down)


        # disable modifier buttons to be able to move while pressing shift for example
        base.mouseWatcherNode.set_modifier_buttons(ModifierButtons())
        base.buttonThrowers[0].node().set_modifier_buttons(ModifierButtons())

        # disable pandas builtin mouse control
        base.disableMouse()

        # add yourself as an update task which gets executed very early before the rendering
        self.update_task = base.addTask(self.update, "UpdateDroneController", sort=-40)

        # # Hotkeys to connect to pstats and reset the initial position
        # base.accept("1", PStatClient.connect)
        # base.accept("3", self.reset_to_initial)

    def print_position(self):
        """ Prints the camera position and hpr """
        pos = base.cam.get_pos(base.render)
        hpr = base.cam.get_hpr(base.render)
        print("(Vec3({}, {}, {}), Vec3({}, {}, {})),".format(
            pos.x, pos.y, pos.z, hpr.x, hpr.y, hpr.z))

    # def update_first_character_quat(self, initial_quat_first, initial_quat_second, changing_quat_second):
    #     initial_quat_second_inverse = initial_quat_second
    #     initial_quat_second_inverse.invert_in_place()
    #     initial_quat_second_conjugate = initial_quat_second.conjugate()
    #     quat_relative = initial_quat_second_conjugate * changing_quat_second
    #     initial_quat_first_normalized = initial_quat_first
    #     initial_quat_first_normalized.normalize()
    #     quat = quat_relative * initial_quat_first * quat_relative.conjugate()
    #     return quat

    def update_first_character_quat(self, initial_quat_first, initial_quat_second, changing_quat_second):
        quat_relative = initial_quat_first - initial_quat_second
        quat = changing_quat_second + quat_relative
        return quat #.invert_in_place()

    def unity_to_panda3d_quaternion(self,unity_quaternion):
        # Flip Y and Z axes
        unity_quaternion = [-unity_quaternion[0], unity_quaternion[2], unity_quaternion[1], -unity_quaternion[3]]

        # Change the sign of the Y and Z components
        panda3d_quaternion = Quat(unity_quaternion[0], -unity_quaternion[1], unity_quaternion[2], unity_quaternion[3])

        return panda3d_quaternion

    def update(self, task):
        """ Internal update method """
        delta = self.clock_obj.get_dt()

        #print(self.test_gyro.read_xyz())

        # Update mouse first
        if base.mouseWatcherNode.has_mouse():
            x = base.mouseWatcherNode.get_mouse_x()
            y = base.mouseWatcherNode.get_mouse_y()
            self.current_mouse_pos = (x * base.camLens.get_fov().x * self.mouse_sensivity,
                                      y * base.camLens.get_fov().y * self.mouse_sensivity)

            if not self.mouse_enabled:
                diffx = -self.current_mouse_pos[0] # TODO: FIX with M_relative in 11.0 (self.last_mouse_pos[0] -
                # self.current_mouse_pos[0])
                diffy = self.current_mouse_pos[1]  # (self.last_mouse_pos[1] - self.current_mouse_pos[1])
                # print(diffx)
                # print(diffy)

                # Don't move in the very beginning TODO: FIX with M_relative in 11.0
                # if self.last_mouse_pos[0] == 0 and self.last_mouse_pos[1] == 0:
                #     diffx = 0
                #     diffy = 0
                #             if self.mmb_activated:
                #                 base.camera.setR(base.camera.getR() + x * rot_speed)
                #                 self.drone.setR(base.camera.getR())
                #             else:
                #                 base.camera.setH(base.camera.getH() + -x * rot_speed)
                #                 self.drone.setH(base.camera.getH() - 180)

                if self.freelook_activated and not self.shift_activated or self.ctrl_activated:
                    self.boom_pivot.set_pos(self.drone.get_pos())
                    if self.mmb_activated:
                        self.boom_pivot.setR(self.boom_pivot.get_r() - diffx)
                        # base.camera.set_r(base.camera.get_r() - diffx)
                    else:
                        self.boom_pivot.setH(self.boom_pivot.get_h() + diffx)
                        self.boom_pivot.setP(self.boom_pivot.get_p() + diffy)
                    # if self.mmb_activated:
                    #     self.boom_pivot.setR(self.drone, -diffx)
                    # else:
                    #     self.boom_pivot.setH(self.drone, diffx)
                    #     self.boom_pivot.setP(self.drone, diffy)
                    self.cam_point.set_pos((0,-self.freelook_distance, 0))

                    # self.boom_arm.update((0,0,0), np.array([-self.freelook_distance, 0, 0]),.1)

                    # self.drone.getPos(),np.array([self.freelook_distance,0,0]),.1) #self.drone.getPos(), np.array(self.drone.getPos()) + np.array([0,self.freelook_distance,0]), 1)

                    base.camera.setPos(render.getRelativePoint(self.boom_pivot, self.cam_point.get_pos()))

                    base.camera.look_at(self.drone.get_pos())
                    self.current_freelook_rot_r = self.current_freelook_rot_r - diffx
                    if self.mmb_activated:
                        base.camera.set_r(self.current_freelook_rot_r)
                    #gyro_values = [gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2]]

                    self.drone.show()

                elif self.firstpersonlook_activated:
                    # with open("D:\gyro.txt", "r") as f:
                    #     test = f.read()
                    #     print(test)
                    #self.counter = self.counter + 1
                    #base.camera.set_hpr(self.sample_gyro_values[self.counter][0],self.sample_gyro_values[self.counter][1],self.sample_gyro_values[self.counter][2])
                    #ser_a = serial.Serial(port='COM4', baudrate=115200, timeout=0.01)


                    #x = ser_a.readline()
                    #print("received1: ", x.decode("utf-8"))
                    #print("received1: ", x.decode("utf-8"))

                    # ser_b = serial.Serial(port='COM5', baudrate=115200, timeout=0.01)
                    # gyro_value = ser_b.readline().decode("utf-8").strip().replace(" ","").replace("[","").replace("]","").rstrip('\n').rstrip('\r').split(",")
                    # if gyro_value is not None and gyro_value is not [] and gyro_value is not [''] and len(gyro_value)==3:
                    #     #print((float(gyro_value[0]),float(gyro_value[1]),float(gyro_value[2])))
                    #     base.camera.set_hpr(float(gyro_value[0]),float(gyro_value[1]),float(gyro_value[2]))

                    #print(sys.stdin.readline().strip())#self.ser.readlines())
                    #pass
                    #parent_conn, child_conn = Pipe()
                    #p = Process(target=f, args=(child_conn,))
                    #p.start()
                    #data_recv = parent_conn.recv()
                    #buf = self.connection.recv(65536)
                    #print(buf)
                    #base.camera.set_hpr()#data_recv[0],data_recv[1],data_recv[2])
                    gyro_values = list(map(float, self.xrsdk.ReadArSensors().split(",")))
                    print(gyro_values)
                    new_quat = self.unity_to_panda3d_quaternion(Quat(gyro_values[0], gyro_values[1], gyro_values[2], gyro_values[3]))
                    flip_rotation = Quat()
                    flip_rotation.setFromAxisAngle(180, Vec3(0, 0, 1))
                    # flip_rota = Quat()
                    # flip_rota.setFromAxisAngle(145, Vec3(0, 0, 1))
                    working_gyro_values = (flip_rotation * Quat(new_quat[3], new_quat[0], new_quat[1], new_quat[2]))
                    working_gyro_values.normalize()
                    # rotation_quat = (working_gyro_values + (self.current_rotation - self.working_current_glasses_rotation)) # this alongside the xrsdk reset on firstpersonfreelook can be used for calibrating an initial look direction
                    # rotation_quat.set_hpr(rotation_quat.get_hpr()) #attempt to convert quaternion to a unit quaternion
                    #flip_rota.invert_in_place()
                    vertical_tilt_quat = Quat()
                    vertical_tilt_quat.setFromAxisAngle(-22, (1, 0, 0)) # 22° tilt
                    base.camera.set_quat(working_gyro_values * (vertical_tilt_quat * flip_rotation * self.current_camera_rotation))
                    # flip_rotb = Quat()
                    # flip_rotb.setFromAxisAngle(180, Vec3(0, 1, 0))


                    # invertquat = Quat(gyro_values[0], gyro_values[1], gyro_values[2], gyro_values[3])
                    # invertquat.invert_in_place()
                    # base.camera.set_quat(Quat(gyro_values[0], gyro_values[1], gyro_values[2], gyro_values[3]).multiply(
                    #     self.current_rotation).multiply(invertquat))

                    # invertquat = Quat(gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2])
                    # invertquat.invert_in_place()
                    # base.camera.set_quat(Quat(gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2]).multiply(
                    #     self.current_rotation).multiply(invertquat))

                    # mainquat = Quat(gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2])
                    # mainquat.invert_in_place()
                    # invertedquat = mainquat
                    # mainquat = Quat(gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2])
                    # base.camera.set_quat(mainquat*base.camera.get_quat()*mainquat.conjugate())
                    #base.camera.set_quat(Quat(gyro_values[3], gyro_values[0], gyro_values[1],gyro_values[2])+self.current_rotation)
                    #gyro_values_quat = Quat(gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2])

                    # rotation_quat = self.update_first_character_quat(
                    #     Quat(self.current_rotation[0], self.current_rotation[1], self.current_rotation[2],
                    #          self.current_rotation[3]),
                    #     Quat(self.current_glasses_rotation[0], self.current_glasses_rotation[1],
                    #          self.current_glasses_rotation[2], self.current_glasses_rotation[3]),
                    #     Quat(gyro_values[3], gyro_values[0], gyro_values[1], gyro_values[2]))

                    #base.camera.set_quat(base.camera,rotation_quat)

                    #clutched code
                    #cameraclutch_hpr = rotation_quat.get_hpr()

                    # TODO: replace with variables because earlier set_quat overwrites any persisting changes from diff
                    # if self.mmb_activated:
                    #     base.camera.set_r(base.camera, - diffx)
                    # else:
                    #     base.camera.set_h(base.camera, diffx)
                    #     base.camera.set_p(base.camera, diffy)

                    #raw_string = self.ss.readline()#.strip().decode()
                    #print(raw_string)

                    #base.camera.set_quat(rotation_quat)

                    #*Quat(gyro_values[2], gyro_values[3], gyro_values[0], gyro_values[1]))


                    #base.camera.set_quat(rotation_quat*Quat(gyro_values[1], gyro_values[2], gyro_values[3], gyro_values[0]))
                    #rotation_quat.invert_in_place()
                    #base.camera.set_quat(Quat(gyro_values[1], gyro_values[2], gyro_values[3], gyro_values[0]) * Quat(self.current_rotation[0], self.current_rotation[1], self.current_rotation[2],
                    #         self.current_rotation[3])) #rotation_quat)
                    # current_quaternion = Quat()
                    # current_quaternion.set_hpr(self.drone.get_hpr())
                    # rotated_quaternion = rotation_quat * current_quaternion * rotation_quat.conjugate()
                    # base.camera.set_hpr(rotated_quaternion.get_hpr())
                    # self.drone.set_hpr(rotated_quaternion.get_hpr())
                    #print(gyro_values)
                    #print(rotated_r, rotated_p, rotated_h)
                    #base.camera.set_hpr(rotated_h, rotated_p, rotated_r)
                    #self.drone.set_hpr(rotated_h, rotated_p, rotated_r)
                    #base.camera.set_quat(Quat(gyro_values[0],gyro_values[1],gyro_values[2],gyro_values[3]))
                    #reduce(lambda left, right: left+right ,zip(list(map(float, self.xrsdk.ReadArSensors().split(","))),self.current_rotation))
                    #base.camera.set_quat(Quat(gyro_values[0],gyro_values[1],gyro_values[2], gyro_values[3])-Quat(self.current_rotation[0],self.current_rotation[1],self.current_rotation[2],self.current_rotation[3]))
                    #print(gyro_values)
                    #base.camera.set_hpr(gyro_values[0], gyro_values[1], gyro_values[2])
                    #self.update_first_character_quat(Quat(self.current_rotation[0],self.current_rotation[1],self.current_rotation[2],self.current_rotation[3]), Quat(self.current_glasses_rotation[0],self.current_glasses_rotation[1],self.current_glasses_rotation[2],self.current_glasses_rotation[3]),Quat(gyro_values[0],gyro_values[1],gyro_values[2], gyro_values[3]))

                    #base.camera.set_quat(self.update_first_character_quat(Quat(self.current_rotation[0],self.current_rotation[1],self.current_rotation[2],self.current_rotation[3]), Quat(self.current_glasses_rotation[0],self.current_glasses_rotation[1],self.current_glasses_rotation[2],self.current_glasses_rotation[3]),Quat(gyro_values[0],gyro_values[1],gyro_values[2], gyro_values[3])))

                else:
                    self.boom_pivot.set_hpr(0,0,0) # hpr = ypr
                    self.drone.hide()

                    base.camera.set_pos(self.drone.get_pos())
                    # if self.mmb_activated:
                    #     self.drone.setR(self.drone.get_r() - diffx)
                    # else:
                    #     self.drone.setH(self.drone.get_h() + diffx)
                    #     self.drone.setP(self.drone.get_p() - diffy)

                    if self.mmb_activated:
                        self.drone.setR(self.drone, - diffx)
                    else:
                        self.drone.setH(self.drone, diffx)
                        self.drone.setP(self.drone, diffy)
                    base.camera.set_quat(self.drone.get_quat())
                    #print(self.drone.get_quat())


                    # quat = LRotation((0,0,0),0)
                    # if self.mmb_activated:
                    #     quat *= LRotation((1, 0, 0),self.drone.get_r() -diffx)
                    # else:
                    #     quat *= LRotation((0, 0, 1), self.drone.get_h() + diffx)
                    #     quat *= LRotation((0, 1, 0), self.drone.get_p() - diffy)

                    # self.drone.set_quat(quat)
                    # base.camera.set_quat(quat)

                    # if self.mmb_activated:
                    #     #TODO: FIX
                    #     self.drone.setR(self.drone.get_r() - diffx)
                    #     base.camera.set_r(self.drone.getR())
                    # else:
                    #     self.drone.setH(self.drone.get_h() + diffx)
                    #     base.camera.set_h(self.drone.getH())
                    #     self.drone.setP(self.drone.get_p() - diffy)
                    #     base.camera.set_p(self.drone.getP())

                    # Compute movement in render space
                    movement_direction = (Vec3(self.movement[1], self.movement[0], self.movement[2]) * self.speed * delta * 100.0)

                    # transform by the camera direction
                    camera_quaternion = base.camera.get_quat(base.render)
                    translated_direction = camera_quaternion.xform(movement_direction)

                    # # z-force is independent of camera direction
                    # translated_direction.add_z(
                    #      * delta * 120.0 * self.speed)

                    self.velocity += translated_direction # * 0.15

                    # apply the new position
                    base.camera.set_pos(base.camera.get_pos() + self.velocity)
                    self.drone.setPos(base.camera.getPos())

                    # test2 = tuple(np.array([2*random.random() -1, 2*random.random() -1, 2*random.random() -1, 2*random.random() -1])*.00001)
                    # rotation_quat = Quat(test2)
                    # base.camera.set_quat(base.camera, rotation_quat)

                    # transform rotation (keyboard keys)
                    # rotation_speed = self.keyboard_hpr_speed * 100.0
                    # rotation_speed *= delta
                    # base.camera.set_hpr(
                    #     base.camera.get_hpr() + Vec3(
                    #         self.hpr_movement[0], self.hpr_movement[1], 0) * rotation_speed)

                    # fade out velocity
                    self.velocity = self.velocity * max(0.0, 1.0 - delta * 60.0 / max(0.001, self.smoothness))

                self.last_mouse_pos = self.current_mouse_pos[:]
                if not self.mouse_enabled:
                    base.win.movePointer(0, int(base.win.getXSize() / 2), int(base.win.getYSize() / 2))

        # bobbing
        # ftime = self.clock_obj.get_frame_time()
        # rotation = (ftime % self.bobbing_speed) / self.bobbing_speed
        # rotation = (min(rotation, 1.0 - rotation) * 2.0 - 0.5) * 2.0
        # if self.velocity.length_squared() > 1e-5 and self.speed > 1e-5:
        #     rotation *= self.bobbing_amount
        #     rotation *= min(1, self.velocity.length()) / self.speed * 0.5
        # else:
        #     rotation = 0
        # base.camera.set_r(rotation)
        return task.cont

    def play_motion_path(self, points, point_duration=1.2):
        """ Plays a motion path from the given set of points """
        fitter = CurveFitter()
        for i, (pos, hpr) in enumerate(points):
            fitter.add_xyz_hpr(i, pos, hpr)

        fitter.compute_tangents(1.0)
        curve = fitter.make_hermite()
        print("Starting motion path with", len(points), "CVs")

        base.render2d.hide()
        base.aspect2d.hide()

        self.curve = curve
        self.curve_time_start = self.clock_obj.get_frame_time()
        self.curve_time_end = self.clock_obj.get_frame_time() + len(points) * point_duration
        self.delta_time_sum = 0.0
        self.delta_time_count = 0
        base.addTask(self.camera_motion_update, "RP_CameraMotionPath", sort=-50)
        base.taskMgr.remove(self.update_task)

    def camera_motion_update(self, task):
        if self.clock_obj.get_frame_time() > self.curve_time_end:
            print("Camera motion path finished")

            # Print performance stats
            avg_ms = self.delta_time_sum / self.delta_time_count
            print("Average frame time (ms): {:4.1f}".format(avg_ms * 1000.0))
            print("Average frame rate: {:4.1f}".format(1.0 / avg_ms))

            self.update_task = base.addTask(
                self.update, "RP_UpdateMovementController", sort=-50)
            base.render2d.show()
            base.aspect2d.show()
            return task.done

        lerp = (self.clock_obj.get_frame_time() - self.curve_time_start) / \
               (self.curve_time_end - self.curve_time_start)
        lerp *= self.curve.get_max_t()

        pos, hpr = Point3(0), Vec3(0)
        self.curve.evaluate_xyz(lerp, pos)
        self.curve.evaluate_hpr(lerp, hpr)

        base.camera.set_pos(pos)
        base.camera.set_hpr(hpr)

        self.delta_time_sum += self.clock_obj.get_dt()
        self.delta_time_count += 1

        return task.cont




    # def wheel_up(self):
    #     pass
    #
    # def wheel_down(self):
    #     pass
    #
    # def ctrl_down(self):
    #     self.ctrl_activated = True
    #
    # def ctrl_up(self):
    #     self.ctrl_activated = False

    # def alt_down(self):
    #     self.alt_activated = True
    #     self.freelook_activated = True
    #
    # def alt_up(self):
    #     self.alt_activated = False
    #     self.freelook_activated = False
    #


    # Accepts arrow keys to move either the player or the menu cursor,
    # Also deals with grid checking and collision detection
    # def move(self, task):
    #     # Get the time that elapsed since last frame.  We multiply this with
    #     # the desired speed in order to find out with which distance to move
    #     # in order to achieve that desired speed.
    #     dt = globalClock.getDt()
    #     move_speed = 7
    #     # If a move-key is pressed, move drone in the specified direction.
    #     # if self.isDown(KeyboardButton.asciiKey(b"w")):
    #     #     self.drone.setY(self.drone, -move_speed * dt)
    #     # if self.isDown(KeyboardButton.asciiKey(b"a")):
    #     #     self.drone.setX(self.drone, move_speed * dt)
    #     # if self.isDown(KeyboardButton.asciiKey(b"s")):
    #     #     self.drone.setY(self.drone, move_speed * dt)
    #     # if self.isDown(KeyboardButton.asciiKey(b"d")):
    #     #     self.drone.setX(self.drone, -move_speed * dt)
    #     # if self.isDown(KeyboardButton.asciiKey(b"e")):
    #     #     self.drone.setZ(self.drone, move_speed * dt)
    #     # if self.isDown(KeyboardButton.asciiKey(b"q")):
    #     #     self.drone.setZ(self.drone, -move_speed * dt)
    #     # if self.isDown(KeyboardButton.ascii_key("alt")):
    #     #     print("alt clicked")
    #     if self.isDown(KeyboardButton.asciiKey(b"w")):
    #         self.drone.setPos(self.drone, render.getRelativeVector(self.drone, Vec3(0, 1, 0)) * move_speed * dt)
    #
    #     # update distributed position and rotation (TODO: func no longer available?)
    #     #self.drone.setDistPos(self.drone.getX(), self.drone.getY(), self.drone.getZ())
    #     #self.drone.setDistHpr(self.drone.getH(), self.drone.getP(), self.drone.getR())
    #
    #     if self.alt_activated:
    #         self.freelook_activated = True
    #     else:
    #         self.freelook_activated = False
    #
    #     if self.freelook_activated:
    #         self.boom_arm.update((0,0,0),np.array([self.freelook_distance,0,0]),.1) # self.drone.getPos(),np.array([self.freelook_distance,0,0]),.1)#self.drone.getPos(), np.array(self.drone.getPos()) + np.array([0,self.freelook_distance,0]), 1)
    #         #swap to freelook camera
    #         base.camera.setPos(render.getRelativePoint(self.drone, tuple(self.boom_arm.line_end)))
    #
    #         new_rot = look_at_rotation(render.getRelativePoint(self.drone, tuple(self.boom_arm.line_end)), self.drone.getPos()) # TODO: camera.lookat func?
    #
    #         if new_rot is not None and not np.isnan(new_rot).any():
    #             base.camera.setHpr(new_rot[2]+270, new_rot[1]+270, new_rot[0])
    #
    #     else:
    #         rot_speed = 60
    #         base.camera.setPos(self.drone.getPos())
    #         if base.mouseWatcherNode.hasMouse():
    #             x = base.mouseWatcherNode.getMouseX()
    #             y = base.mouseWatcherNode.getMouseY()
    #             base.camera.setP(base.camera.getP() + y * rot_speed)
    #             self.drone.setP(base.camera.getP() + 90)
    #             if self.mmb_activated:
    #                 base.camera.setR(base.camera.getR() + x * rot_speed)
    #                 self.drone.setR(base.camera.getR())
    #             else:
    #                 base.camera.setH(base.camera.getH() + -x * rot_speed)
    #                 self.drone.setH(base.camera.getH() - 180)
    #     return task.cont


